
SmartHome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000282a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000156  00800060  0000282a  0000289e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000285c  00000000  00000000  000029f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000fef  00000000  00000000  00005250  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  0000623f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  000063df  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  000065d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  000089dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  00009d62  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000af38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000b0f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000b3ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000bd5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e2       	ldi	r30, 0x2A	; 42
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3b       	cpi	r26, 0xB6	; 182
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 60 12 	call	0x24c0	; 0x24c0 <main>
      7a:	0c 94 13 14 	jmp	0x2826	; 0x2826 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 ab 13 	jmp	0x2756	; 0x2756 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ad ea       	ldi	r26, 0xAD	; 173
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 c7 13 	jmp	0x278e	; 0x278e <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 d3 13 	jmp	0x27a6	; 0x27a6 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 d3 13 	jmp	0x27a6	; 0x27a6 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 ab 13 	jmp	0x2756	; 0x2756 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8d ea       	ldi	r24, 0xAD	; 173
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 c7 13 	jmp	0x278e	; 0x278e <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 b3 13 	jmp	0x2766	; 0x2766 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6d ea       	ldi	r22, 0xAD	; 173
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 cf 13 	jmp	0x279e	; 0x279e <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 d3 13 	jmp	0x27a6	; 0x27a6 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 d3 13 	jmp	0x27a6	; 0x27a6 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 d3 13 	jmp	0x27a6	; 0x27a6 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 bb 13 	jmp	0x2776	; 0x2776 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 b3 13 	jmp	0x2766	; 0x2766 <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 cf 13 	jmp	0x279e	; 0x279e <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	eb 54       	subi	r30, 0x4B	; 75
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <BUZZER_init>:


#include "Buzzer_driver.h"


void BUZZER_init(void){
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
	//set the direction of the Buzzer pin and initialize it to off
	GPIO_setupPinDirection(BUZZER_PORT , BUZZER_PIN , PIN_OUTPUT);
     e26:	83 e0       	ldi	r24, 0x03	; 3
     e28:	63 e0       	ldi	r22, 0x03	; 3
     e2a:	41 e0       	ldi	r20, 0x01	; 1
     e2c:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT , BUZZER_PIN , LOGIC_LOW);
     e30:	83 e0       	ldi	r24, 0x03	; 3
     e32:	63 e0       	ldi	r22, 0x03	; 3
     e34:	40 e0       	ldi	r20, 0x00	; 0
     e36:	0e 94 28 0a 	call	0x1450	; 0x1450 <GPIO_writePin>
}
     e3a:	cf 91       	pop	r28
     e3c:	df 91       	pop	r29
     e3e:	08 95       	ret

00000e40 <BUZZER_On>:

//turn buzzer on
void BUZZER_On(){
     e40:	df 93       	push	r29
     e42:	cf 93       	push	r28
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT , BUZZER_PIN , LOGIC_HIGH);
     e48:	83 e0       	ldi	r24, 0x03	; 3
     e4a:	63 e0       	ldi	r22, 0x03	; 3
     e4c:	41 e0       	ldi	r20, 0x01	; 1
     e4e:	0e 94 28 0a 	call	0x1450	; 0x1450 <GPIO_writePin>
}
     e52:	cf 91       	pop	r28
     e54:	df 91       	pop	r29
     e56:	08 95       	ret

00000e58 <BUZZER_Off>:

//turn buzzer off
void BUZZER_Off(){
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT , BUZZER_PIN , LOGIC_LOW);
     e60:	83 e0       	ldi	r24, 0x03	; 3
     e62:	63 e0       	ldi	r22, 0x03	; 3
     e64:	40 e0       	ldi	r20, 0x00	; 0
     e66:	0e 94 28 0a 	call	0x1450	; 0x1450 <GPIO_writePin>
}
     e6a:	cf 91       	pop	r28
     e6c:	df 91       	pop	r29
     e6e:	08 95       	ret

00000e70 <DC_MOTOR_init>:

#include "DC_MOTOR_driver.h"
#include "PWM.h"

//this function initializes the DC motor
void DC_MOTOR_init() {
     e70:	df 93       	push	r29
     e72:	cf 93       	push	r28
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62
	//setting the direction of the Motor Pins
	GPIO_setupPinDirection(IN1_PORT, IN1_PIN, PIN_OUTPUT);
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	60 e0       	ldi	r22, 0x00	; 0
     e7c:	41 e0       	ldi	r20, 0x01	; 1
     e7e:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(IN2_PORT, IN2_PIN, PIN_OUTPUT);
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	61 e0       	ldi	r22, 0x01	; 1
     e86:	41 e0       	ldi	r20, 0x01	; 1
     e88:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_setupPinDirection>

	//initiating the PINs with Logic zero (Stop state)
	GPIO_writePin(IN1_PORT, IN1_PIN, LOGIC_LOW);
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	60 e0       	ldi	r22, 0x00	; 0
     e90:	40 e0       	ldi	r20, 0x00	; 0
     e92:	0e 94 28 0a 	call	0x1450	; 0x1450 <GPIO_writePin>
	GPIO_writePin(IN2_PORT, IN2_PIN, LOGIC_LOW);
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	61 e0       	ldi	r22, 0x01	; 1
     e9a:	40 e0       	ldi	r20, 0x00	; 0
     e9c:	0e 94 28 0a 	call	0x1450	; 0x1450 <GPIO_writePin>
}
     ea0:	cf 91       	pop	r28
     ea2:	df 91       	pop	r29
     ea4:	08 95       	ret

00000ea6 <DC_MOTOR_Rotate>:

//this function sets the state (stop ,clockwise , anticlockwise) and speed (0% -> 100%);
void DC_MOTOR_Rotate(DcMotor_State state, uint8 speed) {
     ea6:	df 93       	push	r29
     ea8:	cf 93       	push	r28
     eaa:	00 d0       	rcall	.+0      	; 0xeac <DC_MOTOR_Rotate+0x6>
     eac:	00 d0       	rcall	.+0      	; 0xeae <DC_MOTOR_Rotate+0x8>
     eae:	0f 92       	push	r0
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
     eb4:	8a 83       	std	Y+2, r24	; 0x02
     eb6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 duty_cycle = 0;
     eb8:	19 82       	std	Y+1, r1	; 0x01

	//calculate the duty cycle of the PWM signal actuating the motor
	duty_cycle = (speed * 255) / 100;
     eba:	8b 81       	ldd	r24, Y+3	; 0x03
     ebc:	48 2f       	mov	r20, r24
     ebe:	50 e0       	ldi	r21, 0x00	; 0
     ec0:	ca 01       	movw	r24, r20
     ec2:	9c 01       	movw	r18, r24
     ec4:	22 0f       	add	r18, r18
     ec6:	33 1f       	adc	r19, r19
     ec8:	c9 01       	movw	r24, r18
     eca:	96 95       	lsr	r25
     ecc:	98 2f       	mov	r25, r24
     ece:	88 27       	eor	r24, r24
     ed0:	97 95       	ror	r25
     ed2:	87 95       	ror	r24
     ed4:	82 1b       	sub	r24, r18
     ed6:	93 0b       	sbc	r25, r19
     ed8:	84 0f       	add	r24, r20
     eda:	95 1f       	adc	r25, r21
     edc:	24 e6       	ldi	r18, 0x64	; 100
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	b9 01       	movw	r22, r18
     ee2:	0e 94 84 13 	call	0x2708	; 0x2708 <__divmodhi4>
     ee6:	cb 01       	movw	r24, r22
     ee8:	89 83       	std	Y+1, r24	; 0x01

	//the switch case is dependent on the state sent by the function
	switch (state) {
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	3d 83       	std	Y+5, r19	; 0x05
     ef2:	2c 83       	std	Y+4, r18	; 0x04
     ef4:	8c 81       	ldd	r24, Y+4	; 0x04
     ef6:	9d 81       	ldd	r25, Y+5	; 0x05
     ef8:	81 30       	cpi	r24, 0x01	; 1
     efa:	91 05       	cpc	r25, r1
     efc:	b9 f0       	breq	.+46     	; 0xf2c <DC_MOTOR_Rotate+0x86>
     efe:	2c 81       	ldd	r18, Y+4	; 0x04
     f00:	3d 81       	ldd	r19, Y+5	; 0x05
     f02:	22 30       	cpi	r18, 0x02	; 2
     f04:	31 05       	cpc	r19, r1
     f06:	01 f1       	breq	.+64     	; 0xf48 <DC_MOTOR_Rotate+0xa2>
     f08:	8c 81       	ldd	r24, Y+4	; 0x04
     f0a:	9d 81       	ldd	r25, Y+5	; 0x05
     f0c:	00 97       	sbiw	r24, 0x00	; 0
     f0e:	49 f5       	brne	.+82     	; 0xf62 <DC_MOTOR_Rotate+0xbc>

	case Stop:
		GPIO_writePin(IN1_PORT, IN1_PIN, LOGIC_LOW);
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	60 e0       	ldi	r22, 0x00	; 0
     f14:	40 e0       	ldi	r20, 0x00	; 0
     f16:	0e 94 28 0a 	call	0x1450	; 0x1450 <GPIO_writePin>
		GPIO_writePin(IN2_PORT, IN2_PIN, LOGIC_LOW);
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	61 e0       	ldi	r22, 0x01	; 1
     f1e:	40 e0       	ldi	r20, 0x00	; 0
     f20:	0e 94 28 0a 	call	0x1450	; 0x1450 <GPIO_writePin>
		PWM_Timer0_Start(duty_cycle);
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	0e 94 da 08 	call	0x11b4	; 0x11b4 <PWM_Timer0_Start>
     f2a:	1b c0       	rjmp	.+54     	; 0xf62 <DC_MOTOR_Rotate+0xbc>
		break;

	case CLockWise:
		GPIO_writePin(IN1_PORT, IN1_PIN, LOGIC_HIGH);
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	60 e0       	ldi	r22, 0x00	; 0
     f30:	41 e0       	ldi	r20, 0x01	; 1
     f32:	0e 94 28 0a 	call	0x1450	; 0x1450 <GPIO_writePin>
		GPIO_writePin(IN2_PORT, IN2_PIN, LOGIC_LOW);
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	61 e0       	ldi	r22, 0x01	; 1
     f3a:	40 e0       	ldi	r20, 0x00	; 0
     f3c:	0e 94 28 0a 	call	0x1450	; 0x1450 <GPIO_writePin>
		PWM_Timer0_Start(duty_cycle);
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	0e 94 da 08 	call	0x11b4	; 0x11b4 <PWM_Timer0_Start>
     f46:	0d c0       	rjmp	.+26     	; 0xf62 <DC_MOTOR_Rotate+0xbc>
		break;

	case AntiClockwise:
		GPIO_writePin(IN1_PORT, IN1_PIN, LOGIC_LOW);
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	60 e0       	ldi	r22, 0x00	; 0
     f4c:	40 e0       	ldi	r20, 0x00	; 0
     f4e:	0e 94 28 0a 	call	0x1450	; 0x1450 <GPIO_writePin>
		GPIO_writePin(IN2_PORT, IN2_PIN, LOGIC_HIGH);
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	61 e0       	ldi	r22, 0x01	; 1
     f56:	41 e0       	ldi	r20, 0x01	; 1
     f58:	0e 94 28 0a 	call	0x1450	; 0x1450 <GPIO_writePin>
		PWM_Timer0_Start(duty_cycle);
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
     f5e:	0e 94 da 08 	call	0x11b4	; 0x11b4 <PWM_Timer0_Start>
		break;
	}
}
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	0f 90       	pop	r0
     f6a:	0f 90       	pop	r0
     f6c:	cf 91       	pop	r28
     f6e:	df 91       	pop	r29
     f70:	08 95       	ret

00000f72 <FlameSensor_init>:
 *      Author: yahia raouf
 */

#include "Flame_sensor_driver.h"

void FlameSensor_init() {
     f72:	df 93       	push	r29
     f74:	cf 93       	push	r28
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
	///set the direction of the flame sensor pin
	GPIO_setupPinDirection(OUT_PORT, OUT_PIN, PIN_INPUT);
     f7a:	83 e0       	ldi	r24, 0x03	; 3
     f7c:	62 e0       	ldi	r22, 0x02	; 2
     f7e:	40 e0       	ldi	r20, 0x00	; 0
     f80:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_setupPinDirection>
}
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	08 95       	ret

00000f8a <FlameSensor_getValue>:

uint8 FlameSensor_getValue() {
     f8a:	df 93       	push	r29
     f8c:	cf 93       	push	r28
     f8e:	0f 92       	push	r0
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62

	uint8 fire = 0;
     f94:	19 82       	std	Y+1, r1	; 0x01

	//read the value of the pin and return a logical 1 or logical 0
	if (GPIO_readPin(OUT_PORT, OUT_PIN)) {
     f96:	83 e0       	ldi	r24, 0x03	; 3
     f98:	62 e0       	ldi	r22, 0x02	; 2
     f9a:	0e 94 13 0b 	call	0x1626	; 0x1626 <GPIO_readPin>
     f9e:	88 23       	and	r24, r24
     fa0:	19 f0       	breq	.+6      	; 0xfa8 <FlameSensor_getValue+0x1e>
		fire = 1;
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	89 83       	std	Y+1, r24	; 0x01
     fa6:	01 c0       	rjmp	.+2      	; 0xfaa <FlameSensor_getValue+0x20>
	}

	else
		fire = 0;
     fa8:	19 82       	std	Y+1, r1	; 0x01
	return fire;
     faa:	89 81       	ldd	r24, Y+1	; 0x01
}
     fac:	0f 90       	pop	r0
     fae:	cf 91       	pop	r28
     fb0:	df 91       	pop	r29
     fb2:	08 95       	ret

00000fb4 <LDR_getLightIntensity>:
 */

#include "util/delay.h"
#include "LDR_sensor_driver.h"

uint16 LDR_getLightIntensity() {
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
     fbc:	60 97       	sbiw	r28, 0x10	; 16
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	f8 94       	cli
     fc2:	de bf       	out	0x3e, r29	; 62
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	cd bf       	out	0x3d, r28	; 61
	//initialize the ADC
	ADC_init();
     fc8:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <ADC_init>

	//value of light intensity
	uint16 lightIntensity = 0;
     fcc:	18 8a       	std	Y+16, r1	; 0x10
     fce:	1f 86       	std	Y+15, r1	; 0x0f
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	a0 ee       	ldi	r26, 0xE0	; 224
     fd6:	b0 e4       	ldi	r27, 0x40	; 64
     fd8:	8b 87       	std	Y+11, r24	; 0x0b
     fda:	9c 87       	std	Y+12, r25	; 0x0c
     fdc:	ad 87       	std	Y+13, r26	; 0x0d
     fde:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fe0:	6b 85       	ldd	r22, Y+11	; 0x0b
     fe2:	7c 85       	ldd	r23, Y+12	; 0x0c
     fe4:	8d 85       	ldd	r24, Y+13	; 0x0d
     fe6:	9e 85       	ldd	r25, Y+14	; 0x0e
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	4a e7       	ldi	r20, 0x7A	; 122
     fee:	55 e4       	ldi	r21, 0x45	; 69
     ff0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ff4:	dc 01       	movw	r26, r24
     ff6:	cb 01       	movw	r24, r22
     ff8:	8f 83       	std	Y+7, r24	; 0x07
     ffa:	98 87       	std	Y+8, r25	; 0x08
     ffc:	a9 87       	std	Y+9, r26	; 0x09
     ffe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1000:	6f 81       	ldd	r22, Y+7	; 0x07
    1002:	78 85       	ldd	r23, Y+8	; 0x08
    1004:	89 85       	ldd	r24, Y+9	; 0x09
    1006:	9a 85       	ldd	r25, Y+10	; 0x0a
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	40 e8       	ldi	r20, 0x80	; 128
    100e:	5f e3       	ldi	r21, 0x3F	; 63
    1010:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1014:	88 23       	and	r24, r24
    1016:	2c f4       	brge	.+10     	; 0x1022 <LDR_getLightIntensity+0x6e>
		__ticks = 1;
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	9e 83       	std	Y+6, r25	; 0x06
    101e:	8d 83       	std	Y+5, r24	; 0x05
    1020:	3f c0       	rjmp	.+126    	; 0x10a0 <LDR_getLightIntensity+0xec>
	else if (__tmp > 65535)
    1022:	6f 81       	ldd	r22, Y+7	; 0x07
    1024:	78 85       	ldd	r23, Y+8	; 0x08
    1026:	89 85       	ldd	r24, Y+9	; 0x09
    1028:	9a 85       	ldd	r25, Y+10	; 0x0a
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	3f ef       	ldi	r19, 0xFF	; 255
    102e:	4f e7       	ldi	r20, 0x7F	; 127
    1030:	57 e4       	ldi	r21, 0x47	; 71
    1032:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1036:	18 16       	cp	r1, r24
    1038:	4c f5       	brge	.+82     	; 0x108c <LDR_getLightIntensity+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    103a:	6b 85       	ldd	r22, Y+11	; 0x0b
    103c:	7c 85       	ldd	r23, Y+12	; 0x0c
    103e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1040:	9e 85       	ldd	r25, Y+14	; 0x0e
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	40 e2       	ldi	r20, 0x20	; 32
    1048:	51 e4       	ldi	r21, 0x41	; 65
    104a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    104e:	dc 01       	movw	r26, r24
    1050:	cb 01       	movw	r24, r22
    1052:	bc 01       	movw	r22, r24
    1054:	cd 01       	movw	r24, r26
    1056:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    105a:	dc 01       	movw	r26, r24
    105c:	cb 01       	movw	r24, r22
    105e:	9e 83       	std	Y+6, r25	; 0x06
    1060:	8d 83       	std	Y+5, r24	; 0x05
    1062:	0f c0       	rjmp	.+30     	; 0x1082 <LDR_getLightIntensity+0xce>
    1064:	80 e9       	ldi	r24, 0x90	; 144
    1066:	91 e0       	ldi	r25, 0x01	; 1
    1068:	9c 83       	std	Y+4, r25	; 0x04
    106a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    106c:	8b 81       	ldd	r24, Y+3	; 0x03
    106e:	9c 81       	ldd	r25, Y+4	; 0x04
    1070:	01 97       	sbiw	r24, 0x01	; 1
    1072:	f1 f7       	brne	.-4      	; 0x1070 <LDR_getLightIntensity+0xbc>
    1074:	9c 83       	std	Y+4, r25	; 0x04
    1076:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1078:	8d 81       	ldd	r24, Y+5	; 0x05
    107a:	9e 81       	ldd	r25, Y+6	; 0x06
    107c:	01 97       	sbiw	r24, 0x01	; 1
    107e:	9e 83       	std	Y+6, r25	; 0x06
    1080:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1082:	8d 81       	ldd	r24, Y+5	; 0x05
    1084:	9e 81       	ldd	r25, Y+6	; 0x06
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	69 f7       	brne	.-38     	; 0x1064 <LDR_getLightIntensity+0xb0>
    108a:	14 c0       	rjmp	.+40     	; 0x10b4 <LDR_getLightIntensity+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    108c:	6f 81       	ldd	r22, Y+7	; 0x07
    108e:	78 85       	ldd	r23, Y+8	; 0x08
    1090:	89 85       	ldd	r24, Y+9	; 0x09
    1092:	9a 85       	ldd	r25, Y+10	; 0x0a
    1094:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	9e 83       	std	Y+6, r25	; 0x06
    109e:	8d 83       	std	Y+5, r24	; 0x05
    10a0:	8d 81       	ldd	r24, Y+5	; 0x05
    10a2:	9e 81       	ldd	r25, Y+6	; 0x06
    10a4:	9a 83       	std	Y+2, r25	; 0x02
    10a6:	89 83       	std	Y+1, r24	; 0x01
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	9a 81       	ldd	r25, Y+2	; 0x02
    10ac:	01 97       	sbiw	r24, 0x01	; 1
    10ae:	f1 f7       	brne	.-4      	; 0x10ac <LDR_getLightIntensity+0xf8>
    10b0:	9a 83       	std	Y+2, r25	; 0x02
    10b2:	89 83       	std	Y+1, r24	; 0x01

	//this delay is added to give time for the ADC to get ready
	_delay_ms(7);

	//this equation is responsible to calculate the precentage of light intensity sensed by the LDR
	lightIntensity = (uint16) (((uint32) ADC_readChannel(LDR_SENSOR_CHANNEL_ID)
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	0e 94 06 09 	call	0x120c	; 0x120c <ADC_readChannel>
    10ba:	cc 01       	movw	r24, r24
    10bc:	a0 e0       	ldi	r26, 0x00	; 0
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	24 e6       	ldi	r18, 0x64	; 100
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	40 e0       	ldi	r20, 0x00	; 0
    10c6:	50 e0       	ldi	r21, 0x00	; 0
    10c8:	bc 01       	movw	r22, r24
    10ca:	cd 01       	movw	r24, r26
    10cc:	0e 94 65 13 	call	0x26ca	; 0x26ca <__mulsi3>
    10d0:	dc 01       	movw	r26, r24
    10d2:	cb 01       	movw	r24, r22
    10d4:	bc 01       	movw	r22, r24
    10d6:	cd 01       	movw	r24, r26
    10d8:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    10dc:	dc 01       	movw	r26, r24
    10de:	cb 01       	movw	r24, r22
    10e0:	bc 01       	movw	r22, r24
    10e2:	cd 01       	movw	r24, r26
    10e4:	2a e0       	ldi	r18, 0x0A	; 10
    10e6:	37 ed       	ldi	r19, 0xD7	; 215
    10e8:	43 e2       	ldi	r20, 0x23	; 35
    10ea:	50 e4       	ldi	r21, 0x40	; 64
    10ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10f0:	dc 01       	movw	r26, r24
    10f2:	cb 01       	movw	r24, r22
    10f4:	bc 01       	movw	r22, r24
    10f6:	cd 01       	movw	r24, r26
    10f8:	24 e1       	ldi	r18, 0x14	; 20
    10fa:	3e ea       	ldi	r19, 0xAE	; 174
    10fc:	43 e2       	ldi	r20, 0x23	; 35
    10fe:	55 e4       	ldi	r21, 0x45	; 69
    1100:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	bc 01       	movw	r22, r24
    110a:	cd 01       	movw	r24, r26
    110c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1110:	dc 01       	movw	r26, r24
    1112:	cb 01       	movw	r24, r22
    1114:	98 8b       	std	Y+16, r25	; 0x10
    1116:	8f 87       	std	Y+15, r24	; 0x0f
			* LDR_SENSOR_MAX_LIGHT_INTENSITY * ADC_REF_VOLT_VALUE)
			/ (ADC_MAXIMUM_VALUE * LDR_SENSOR_MAX_VOLT_VALUE));

	return lightIntensity;
    1118:	8f 85       	ldd	r24, Y+15	; 0x0f
    111a:	98 89       	ldd	r25, Y+16	; 0x10
}
    111c:	60 96       	adiw	r28, 0x10	; 16
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	f8 94       	cli
    1122:	de bf       	out	0x3e, r29	; 62
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	cd bf       	out	0x3d, r28	; 61
    1128:	cf 91       	pop	r28
    112a:	df 91       	pop	r29
    112c:	08 95       	ret

0000112e <LED_init>:
 */

#include "LED_driver.h"
#include "gpio.h"

void LED_init() {
    112e:	df 93       	push	r29
    1130:	cf 93       	push	r28
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
	//set the direction of each pin
	GPIO_setupPinDirection(LED_PORT, GREEN, PIN_OUTPUT);
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	66 e0       	ldi	r22, 0x06	; 6
    113a:	41 e0       	ldi	r20, 0x01	; 1
    113c:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LED_PORT, BLUE, PIN_OUTPUT);
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	67 e0       	ldi	r22, 0x07	; 7
    1144:	41 e0       	ldi	r20, 0x01	; 1
    1146:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LED_PORT, RED, PIN_OUTPUT);
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	65 e0       	ldi	r22, 0x05	; 5
    114e:	41 e0       	ldi	r20, 0x01	; 1
    1150:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_setupPinDirection>

	//check if the LEDs are connected using positive logic
	#if(POSITIVE_LOGIC)
		GPIO_writePin(LED_PORT, GREEN , LOGIC_LOW);
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	66 e0       	ldi	r22, 0x06	; 6
    1158:	40 e0       	ldi	r20, 0x00	; 0
    115a:	0e 94 28 0a 	call	0x1450	; 0x1450 <GPIO_writePin>
		GPIO_writePin(LED_PORT, BLUE , LOGIC_LOW);
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	67 e0       	ldi	r22, 0x07	; 7
    1162:	40 e0       	ldi	r20, 0x00	; 0
    1164:	0e 94 28 0a 	call	0x1450	; 0x1450 <GPIO_writePin>
		GPIO_writePin(LED_PORT, RED, LOGIC_LOW);
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	65 e0       	ldi	r22, 0x05	; 5
    116c:	40 e0       	ldi	r20, 0x00	; 0
    116e:	0e 94 28 0a 	call	0x1450	; 0x1450 <GPIO_writePin>
	#else
		GPIO_writePin(LED_PORT, GREEN, LOGIC_HIGH);
		GPIO_writePin(LED_PORT, BLUE, LOGIC_HIGH);
		GPIO_writePin(LED_PORT, RED, LOGIC_HIGH);
	#endif
}
    1172:	cf 91       	pop	r28
    1174:	df 91       	pop	r29
    1176:	08 95       	ret

00001178 <LED_on>:

//This function turns on the LED
void LED_on(LED_ID id) {
    1178:	df 93       	push	r29
    117a:	cf 93       	push	r28
    117c:	0f 92       	push	r0
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(LED_PORT , id , POSITIVE_LOGIC);
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	69 81       	ldd	r22, Y+1	; 0x01
    1188:	41 e0       	ldi	r20, 0x01	; 1
    118a:	0e 94 28 0a 	call	0x1450	; 0x1450 <GPIO_writePin>
}
    118e:	0f 90       	pop	r0
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	08 95       	ret

00001196 <LED_off>:

//this function turns of the LED
void LED_off(LED_ID id){
    1196:	df 93       	push	r29
    1198:	cf 93       	push	r28
    119a:	0f 92       	push	r0
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
    11a0:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(LED_PORT , id , ~(POSITIVE_LOGIC));
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	69 81       	ldd	r22, Y+1	; 0x01
    11a6:	4e ef       	ldi	r20, 0xFE	; 254
    11a8:	0e 94 28 0a 	call	0x1450	; 0x1450 <GPIO_writePin>
}
    11ac:	0f 90       	pop	r0
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	08 95       	ret

000011b4 <PWM_Timer0_Start>:
 */

#include "avr/io.h"
#include "PWM.h"

void PWM_Timer0_Start(uint8 duty_cycle){
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	0f 92       	push	r0
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
    11be:	89 83       	std	Y+1, r24	; 0x01
	/*
	  1.setting the timer mode to Fast PWm
	  2.Setting the prescalar to 1024
	  3.Set Operation mode to Non-Inverting
	 */
	TCCR0 |= (1<<WGM00) | (1<<WGM01) | (1<<CS00) | (1<<CS02) | (1<<COM01);
    11c0:	a3 e5       	ldi	r26, 0x53	; 83
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	e3 e5       	ldi	r30, 0x53	; 83
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	8d 66       	ori	r24, 0x6D	; 109
    11cc:	8c 93       	st	X, r24

	/*setting the Output compare register value to the duty cycle*/
	OCR0 = duty_cycle;
    11ce:	ec e5       	ldi	r30, 0x5C	; 92
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	80 83       	st	Z, r24
	GPIO_setupPinDirection(PORTB_ID , PIN3_ID , PIN_OUTPUT);
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	63 e0       	ldi	r22, 0x03	; 3
    11da:	41 e0       	ldi	r20, 0x01	; 1
    11dc:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_setupPinDirection>
}
    11e0:	0f 90       	pop	r0
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	08 95       	ret

000011e8 <ADC_init>:
/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/

void ADC_init(void)
{
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 00 to choose to connect external reference voltage by input this voltage through AREF pin
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX |= (1<<REFS0) | (1<<REFS1);
    11f0:	a7 e2       	ldi	r26, 0x27	; 39
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	e7 e2       	ldi	r30, 0x27	; 39
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	80 6c       	ori	r24, 0xC0	; 192
    11fc:	8c 93       	st	X, r24
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 1 Enable ADC Interrupt
	 * ADATE   = 0 Disable Auto Trigger
	 * ADPS2:0 = 011 to choose ADC_Clock = F_CPU/128 = 16Mhz/128 = 125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
    11fe:	e6 e2       	ldi	r30, 0x26	; 38
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	87 e8       	ldi	r24, 0x87	; 135
    1204:	80 83       	st	Z, r24
}
    1206:	cf 91       	pop	r28
    1208:	df 91       	pop	r29
    120a:	08 95       	ret

0000120c <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel_num)
{
    120c:	df 93       	push	r29
    120e:	cf 93       	push	r28
    1210:	0f 92       	push	r0
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
    1216:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; /* Input channel number must be from 0 --> 7 */
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	87 70       	andi	r24, 0x07	; 7
    121c:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
    121e:	a7 e2       	ldi	r26, 0x27	; 39
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	e7 e2       	ldi	r30, 0x27	; 39
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	80 7e       	andi	r24, 0xE0	; 224
    122a:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; /* Choose the correct channel by setting the channel number in MUX4:0 bits */
    122c:	a7 e2       	ldi	r26, 0x27	; 39
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e7 e2       	ldi	r30, 0x27	; 39
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	90 81       	ld	r25, Z
    1236:	89 81       	ldd	r24, Y+1	; 0x01
    1238:	89 2b       	or	r24, r25
    123a:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); /* Start conversion write '1' to ADSC */
    123c:	a6 e2       	ldi	r26, 0x26	; 38
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e6 e2       	ldi	r30, 0x26	; 38
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	80 64       	ori	r24, 0x40	; 64
    1248:	8c 93       	st	X, r24
	while (!(ADCSRA & (1 << ADIF)));
    124a:	e6 e2       	ldi	r30, 0x26	; 38
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	88 2f       	mov	r24, r24
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	80 71       	andi	r24, 0x10	; 16
    1256:	90 70       	andi	r25, 0x00	; 0
    1258:	00 97       	sbiw	r24, 0x00	; 0
    125a:	b9 f3       	breq	.-18     	; 0x124a <ADC_readChannel+0x3e>
	ADCSRA |= (1 << ADIF);
    125c:	a6 e2       	ldi	r26, 0x26	; 38
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e6 e2       	ldi	r30, 0x26	; 38
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	80 61       	ori	r24, 0x10	; 16
    1268:	8c 93       	st	X, r24
	return ADC;
    126a:	e4 e2       	ldi	r30, 0x24	; 36
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	91 81       	ldd	r25, Z+1	; 0x01
}
    1272:	0f 90       	pop	r0
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	08 95       	ret

0000127a <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	00 d0       	rcall	.+0      	; 0x1280 <GPIO_setupPinDirection+0x6>
    1280:	00 d0       	rcall	.+0      	; 0x1282 <GPIO_setupPinDirection+0x8>
    1282:	0f 92       	push	r0
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
    1288:	89 83       	std	Y+1, r24	; 0x01
    128a:	6a 83       	std	Y+2, r22	; 0x02
    128c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	88 30       	cpi	r24, 0x08	; 8
    1292:	08 f0       	brcs	.+2      	; 0x1296 <GPIO_setupPinDirection+0x1c>
    1294:	d5 c0       	rjmp	.+426    	; 0x1440 <GPIO_setupPinDirection+0x1c6>
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	84 30       	cpi	r24, 0x04	; 4
    129a:	08 f0       	brcs	.+2      	; 0x129e <GPIO_setupPinDirection+0x24>
    129c:	d1 c0       	rjmp	.+418    	; 0x1440 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	3d 83       	std	Y+5, r19	; 0x05
    12a6:	2c 83       	std	Y+4, r18	; 0x04
    12a8:	8c 81       	ldd	r24, Y+4	; 0x04
    12aa:	9d 81       	ldd	r25, Y+5	; 0x05
    12ac:	81 30       	cpi	r24, 0x01	; 1
    12ae:	91 05       	cpc	r25, r1
    12b0:	09 f4       	brne	.+2      	; 0x12b4 <GPIO_setupPinDirection+0x3a>
    12b2:	43 c0       	rjmp	.+134    	; 0x133a <GPIO_setupPinDirection+0xc0>
    12b4:	2c 81       	ldd	r18, Y+4	; 0x04
    12b6:	3d 81       	ldd	r19, Y+5	; 0x05
    12b8:	22 30       	cpi	r18, 0x02	; 2
    12ba:	31 05       	cpc	r19, r1
    12bc:	2c f4       	brge	.+10     	; 0x12c8 <GPIO_setupPinDirection+0x4e>
    12be:	8c 81       	ldd	r24, Y+4	; 0x04
    12c0:	9d 81       	ldd	r25, Y+5	; 0x05
    12c2:	00 97       	sbiw	r24, 0x00	; 0
    12c4:	71 f0       	breq	.+28     	; 0x12e2 <GPIO_setupPinDirection+0x68>
    12c6:	bc c0       	rjmp	.+376    	; 0x1440 <GPIO_setupPinDirection+0x1c6>
    12c8:	2c 81       	ldd	r18, Y+4	; 0x04
    12ca:	3d 81       	ldd	r19, Y+5	; 0x05
    12cc:	22 30       	cpi	r18, 0x02	; 2
    12ce:	31 05       	cpc	r19, r1
    12d0:	09 f4       	brne	.+2      	; 0x12d4 <GPIO_setupPinDirection+0x5a>
    12d2:	5f c0       	rjmp	.+190    	; 0x1392 <GPIO_setupPinDirection+0x118>
    12d4:	8c 81       	ldd	r24, Y+4	; 0x04
    12d6:	9d 81       	ldd	r25, Y+5	; 0x05
    12d8:	83 30       	cpi	r24, 0x03	; 3
    12da:	91 05       	cpc	r25, r1
    12dc:	09 f4       	brne	.+2      	; 0x12e0 <GPIO_setupPinDirection+0x66>
    12de:	85 c0       	rjmp	.+266    	; 0x13ea <GPIO_setupPinDirection+0x170>
    12e0:	af c0       	rjmp	.+350    	; 0x1440 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	81 30       	cpi	r24, 0x01	; 1
    12e6:	a1 f4       	brne	.+40     	; 0x1310 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    12e8:	aa e3       	ldi	r26, 0x3A	; 58
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	ea e3       	ldi	r30, 0x3A	; 58
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	48 2f       	mov	r20, r24
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	02 2e       	mov	r0, r18
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <GPIO_setupPinDirection+0x8c>
    1302:	88 0f       	add	r24, r24
    1304:	99 1f       	adc	r25, r25
    1306:	0a 94       	dec	r0
    1308:	e2 f7       	brpl	.-8      	; 0x1302 <GPIO_setupPinDirection+0x88>
    130a:	84 2b       	or	r24, r20
    130c:	8c 93       	st	X, r24
    130e:	98 c0       	rjmp	.+304    	; 0x1440 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1310:	aa e3       	ldi	r26, 0x3A	; 58
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	ea e3       	ldi	r30, 0x3A	; 58
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	48 2f       	mov	r20, r24
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	02 2e       	mov	r0, r18
    1328:	02 c0       	rjmp	.+4      	; 0x132e <GPIO_setupPinDirection+0xb4>
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	0a 94       	dec	r0
    1330:	e2 f7       	brpl	.-8      	; 0x132a <GPIO_setupPinDirection+0xb0>
    1332:	80 95       	com	r24
    1334:	84 23       	and	r24, r20
    1336:	8c 93       	st	X, r24
    1338:	83 c0       	rjmp	.+262    	; 0x1440 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	81 30       	cpi	r24, 0x01	; 1
    133e:	a1 f4       	brne	.+40     	; 0x1368 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1340:	a7 e3       	ldi	r26, 0x37	; 55
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	e7 e3       	ldi	r30, 0x37	; 55
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	48 2f       	mov	r20, r24
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	02 2e       	mov	r0, r18
    1358:	02 c0       	rjmp	.+4      	; 0x135e <GPIO_setupPinDirection+0xe4>
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	0a 94       	dec	r0
    1360:	e2 f7       	brpl	.-8      	; 0x135a <GPIO_setupPinDirection+0xe0>
    1362:	84 2b       	or	r24, r20
    1364:	8c 93       	st	X, r24
    1366:	6c c0       	rjmp	.+216    	; 0x1440 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1368:	a7 e3       	ldi	r26, 0x37	; 55
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	e7 e3       	ldi	r30, 0x37	; 55
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	48 2f       	mov	r20, r24
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	02 2e       	mov	r0, r18
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <GPIO_setupPinDirection+0x10c>
    1382:	88 0f       	add	r24, r24
    1384:	99 1f       	adc	r25, r25
    1386:	0a 94       	dec	r0
    1388:	e2 f7       	brpl	.-8      	; 0x1382 <GPIO_setupPinDirection+0x108>
    138a:	80 95       	com	r24
    138c:	84 23       	and	r24, r20
    138e:	8c 93       	st	X, r24
    1390:	57 c0       	rjmp	.+174    	; 0x1440 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	81 30       	cpi	r24, 0x01	; 1
    1396:	a1 f4       	brne	.+40     	; 0x13c0 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1398:	a4 e3       	ldi	r26, 0x34	; 52
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e4 e3       	ldi	r30, 0x34	; 52
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	48 2f       	mov	r20, r24
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	02 2e       	mov	r0, r18
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <GPIO_setupPinDirection+0x13c>
    13b2:	88 0f       	add	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	0a 94       	dec	r0
    13b8:	e2 f7       	brpl	.-8      	; 0x13b2 <GPIO_setupPinDirection+0x138>
    13ba:	84 2b       	or	r24, r20
    13bc:	8c 93       	st	X, r24
    13be:	40 c0       	rjmp	.+128    	; 0x1440 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    13c0:	a4 e3       	ldi	r26, 0x34	; 52
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	e4 e3       	ldi	r30, 0x34	; 52
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	48 2f       	mov	r20, r24
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	02 2e       	mov	r0, r18
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <GPIO_setupPinDirection+0x164>
    13da:	88 0f       	add	r24, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	0a 94       	dec	r0
    13e0:	e2 f7       	brpl	.-8      	; 0x13da <GPIO_setupPinDirection+0x160>
    13e2:	80 95       	com	r24
    13e4:	84 23       	and	r24, r20
    13e6:	8c 93       	st	X, r24
    13e8:	2b c0       	rjmp	.+86     	; 0x1440 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	81 30       	cpi	r24, 0x01	; 1
    13ee:	a1 f4       	brne	.+40     	; 0x1418 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    13f0:	a1 e3       	ldi	r26, 0x31	; 49
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	e1 e3       	ldi	r30, 0x31	; 49
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	48 2f       	mov	r20, r24
    13fc:	8a 81       	ldd	r24, Y+2	; 0x02
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	02 2e       	mov	r0, r18
    1408:	02 c0       	rjmp	.+4      	; 0x140e <GPIO_setupPinDirection+0x194>
    140a:	88 0f       	add	r24, r24
    140c:	99 1f       	adc	r25, r25
    140e:	0a 94       	dec	r0
    1410:	e2 f7       	brpl	.-8      	; 0x140a <GPIO_setupPinDirection+0x190>
    1412:	84 2b       	or	r24, r20
    1414:	8c 93       	st	X, r24
    1416:	14 c0       	rjmp	.+40     	; 0x1440 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1418:	a1 e3       	ldi	r26, 0x31	; 49
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e1 e3       	ldi	r30, 0x31	; 49
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	48 2f       	mov	r20, r24
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	02 2e       	mov	r0, r18
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <GPIO_setupPinDirection+0x1bc>
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	0a 94       	dec	r0
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <GPIO_setupPinDirection+0x1b8>
    143a:	80 95       	com	r24
    143c:	84 23       	and	r24, r20
    143e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	08 95       	ret

00001450 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	00 d0       	rcall	.+0      	; 0x1456 <GPIO_writePin+0x6>
    1456:	00 d0       	rcall	.+0      	; 0x1458 <GPIO_writePin+0x8>
    1458:	0f 92       	push	r0
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	89 83       	std	Y+1, r24	; 0x01
    1460:	6a 83       	std	Y+2, r22	; 0x02
    1462:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1464:	8a 81       	ldd	r24, Y+2	; 0x02
    1466:	88 30       	cpi	r24, 0x08	; 8
    1468:	08 f0       	brcs	.+2      	; 0x146c <GPIO_writePin+0x1c>
    146a:	d5 c0       	rjmp	.+426    	; 0x1616 <GPIO_writePin+0x1c6>
    146c:	89 81       	ldd	r24, Y+1	; 0x01
    146e:	84 30       	cpi	r24, 0x04	; 4
    1470:	08 f0       	brcs	.+2      	; 0x1474 <GPIO_writePin+0x24>
    1472:	d1 c0       	rjmp	.+418    	; 0x1616 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1474:	89 81       	ldd	r24, Y+1	; 0x01
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	3d 83       	std	Y+5, r19	; 0x05
    147c:	2c 83       	std	Y+4, r18	; 0x04
    147e:	8c 81       	ldd	r24, Y+4	; 0x04
    1480:	9d 81       	ldd	r25, Y+5	; 0x05
    1482:	81 30       	cpi	r24, 0x01	; 1
    1484:	91 05       	cpc	r25, r1
    1486:	09 f4       	brne	.+2      	; 0x148a <GPIO_writePin+0x3a>
    1488:	43 c0       	rjmp	.+134    	; 0x1510 <GPIO_writePin+0xc0>
    148a:	2c 81       	ldd	r18, Y+4	; 0x04
    148c:	3d 81       	ldd	r19, Y+5	; 0x05
    148e:	22 30       	cpi	r18, 0x02	; 2
    1490:	31 05       	cpc	r19, r1
    1492:	2c f4       	brge	.+10     	; 0x149e <GPIO_writePin+0x4e>
    1494:	8c 81       	ldd	r24, Y+4	; 0x04
    1496:	9d 81       	ldd	r25, Y+5	; 0x05
    1498:	00 97       	sbiw	r24, 0x00	; 0
    149a:	71 f0       	breq	.+28     	; 0x14b8 <GPIO_writePin+0x68>
    149c:	bc c0       	rjmp	.+376    	; 0x1616 <GPIO_writePin+0x1c6>
    149e:	2c 81       	ldd	r18, Y+4	; 0x04
    14a0:	3d 81       	ldd	r19, Y+5	; 0x05
    14a2:	22 30       	cpi	r18, 0x02	; 2
    14a4:	31 05       	cpc	r19, r1
    14a6:	09 f4       	brne	.+2      	; 0x14aa <GPIO_writePin+0x5a>
    14a8:	5f c0       	rjmp	.+190    	; 0x1568 <GPIO_writePin+0x118>
    14aa:	8c 81       	ldd	r24, Y+4	; 0x04
    14ac:	9d 81       	ldd	r25, Y+5	; 0x05
    14ae:	83 30       	cpi	r24, 0x03	; 3
    14b0:	91 05       	cpc	r25, r1
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <GPIO_writePin+0x66>
    14b4:	85 c0       	rjmp	.+266    	; 0x15c0 <GPIO_writePin+0x170>
    14b6:	af c0       	rjmp	.+350    	; 0x1616 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	81 30       	cpi	r24, 0x01	; 1
    14bc:	a1 f4       	brne	.+40     	; 0x14e6 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    14be:	ab e3       	ldi	r26, 0x3B	; 59
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	eb e3       	ldi	r30, 0x3B	; 59
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	48 2f       	mov	r20, r24
    14ca:	8a 81       	ldd	r24, Y+2	; 0x02
    14cc:	28 2f       	mov	r18, r24
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	02 2e       	mov	r0, r18
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <GPIO_writePin+0x8c>
    14d8:	88 0f       	add	r24, r24
    14da:	99 1f       	adc	r25, r25
    14dc:	0a 94       	dec	r0
    14de:	e2 f7       	brpl	.-8      	; 0x14d8 <GPIO_writePin+0x88>
    14e0:	84 2b       	or	r24, r20
    14e2:	8c 93       	st	X, r24
    14e4:	98 c0       	rjmp	.+304    	; 0x1616 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    14e6:	ab e3       	ldi	r26, 0x3B	; 59
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	eb e3       	ldi	r30, 0x3B	; 59
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	48 2f       	mov	r20, r24
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	28 2f       	mov	r18, r24
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	02 2e       	mov	r0, r18
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <GPIO_writePin+0xb4>
    1500:	88 0f       	add	r24, r24
    1502:	99 1f       	adc	r25, r25
    1504:	0a 94       	dec	r0
    1506:	e2 f7       	brpl	.-8      	; 0x1500 <GPIO_writePin+0xb0>
    1508:	80 95       	com	r24
    150a:	84 23       	and	r24, r20
    150c:	8c 93       	st	X, r24
    150e:	83 c0       	rjmp	.+262    	; 0x1616 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	81 30       	cpi	r24, 0x01	; 1
    1514:	a1 f4       	brne	.+40     	; 0x153e <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1516:	a8 e3       	ldi	r26, 0x38	; 56
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	e8 e3       	ldi	r30, 0x38	; 56
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	48 2f       	mov	r20, r24
    1522:	8a 81       	ldd	r24, Y+2	; 0x02
    1524:	28 2f       	mov	r18, r24
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	02 2e       	mov	r0, r18
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <GPIO_writePin+0xe4>
    1530:	88 0f       	add	r24, r24
    1532:	99 1f       	adc	r25, r25
    1534:	0a 94       	dec	r0
    1536:	e2 f7       	brpl	.-8      	; 0x1530 <GPIO_writePin+0xe0>
    1538:	84 2b       	or	r24, r20
    153a:	8c 93       	st	X, r24
    153c:	6c c0       	rjmp	.+216    	; 0x1616 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    153e:	a8 e3       	ldi	r26, 0x38	; 56
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	e8 e3       	ldi	r30, 0x38	; 56
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	48 2f       	mov	r20, r24
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	02 2e       	mov	r0, r18
    1556:	02 c0       	rjmp	.+4      	; 0x155c <GPIO_writePin+0x10c>
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	0a 94       	dec	r0
    155e:	e2 f7       	brpl	.-8      	; 0x1558 <GPIO_writePin+0x108>
    1560:	80 95       	com	r24
    1562:	84 23       	and	r24, r20
    1564:	8c 93       	st	X, r24
    1566:	57 c0       	rjmp	.+174    	; 0x1616 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
    156a:	81 30       	cpi	r24, 0x01	; 1
    156c:	a1 f4       	brne	.+40     	; 0x1596 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    156e:	a5 e3       	ldi	r26, 0x35	; 53
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e5 e3       	ldi	r30, 0x35	; 53
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	48 2f       	mov	r20, r24
    157a:	8a 81       	ldd	r24, Y+2	; 0x02
    157c:	28 2f       	mov	r18, r24
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	02 2e       	mov	r0, r18
    1586:	02 c0       	rjmp	.+4      	; 0x158c <GPIO_writePin+0x13c>
    1588:	88 0f       	add	r24, r24
    158a:	99 1f       	adc	r25, r25
    158c:	0a 94       	dec	r0
    158e:	e2 f7       	brpl	.-8      	; 0x1588 <GPIO_writePin+0x138>
    1590:	84 2b       	or	r24, r20
    1592:	8c 93       	st	X, r24
    1594:	40 c0       	rjmp	.+128    	; 0x1616 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1596:	a5 e3       	ldi	r26, 0x35	; 53
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	e5 e3       	ldi	r30, 0x35	; 53
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	48 2f       	mov	r20, r24
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	02 2e       	mov	r0, r18
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <GPIO_writePin+0x164>
    15b0:	88 0f       	add	r24, r24
    15b2:	99 1f       	adc	r25, r25
    15b4:	0a 94       	dec	r0
    15b6:	e2 f7       	brpl	.-8      	; 0x15b0 <GPIO_writePin+0x160>
    15b8:	80 95       	com	r24
    15ba:	84 23       	and	r24, r20
    15bc:	8c 93       	st	X, r24
    15be:	2b c0       	rjmp	.+86     	; 0x1616 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	81 30       	cpi	r24, 0x01	; 1
    15c4:	a1 f4       	brne	.+40     	; 0x15ee <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    15c6:	a2 e3       	ldi	r26, 0x32	; 50
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	e2 e3       	ldi	r30, 0x32	; 50
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	48 2f       	mov	r20, r24
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
    15d4:	28 2f       	mov	r18, r24
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	02 2e       	mov	r0, r18
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <GPIO_writePin+0x194>
    15e0:	88 0f       	add	r24, r24
    15e2:	99 1f       	adc	r25, r25
    15e4:	0a 94       	dec	r0
    15e6:	e2 f7       	brpl	.-8      	; 0x15e0 <GPIO_writePin+0x190>
    15e8:	84 2b       	or	r24, r20
    15ea:	8c 93       	st	X, r24
    15ec:	14 c0       	rjmp	.+40     	; 0x1616 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    15ee:	a2 e3       	ldi	r26, 0x32	; 50
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	e2 e3       	ldi	r30, 0x32	; 50
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	48 2f       	mov	r20, r24
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	02 2e       	mov	r0, r18
    1606:	02 c0       	rjmp	.+4      	; 0x160c <GPIO_writePin+0x1bc>
    1608:	88 0f       	add	r24, r24
    160a:	99 1f       	adc	r25, r25
    160c:	0a 94       	dec	r0
    160e:	e2 f7       	brpl	.-8      	; 0x1608 <GPIO_writePin+0x1b8>
    1610:	80 95       	com	r24
    1612:	84 23       	and	r24, r20
    1614:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1616:	0f 90       	pop	r0
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	cf 91       	pop	r28
    1622:	df 91       	pop	r29
    1624:	08 95       	ret

00001626 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	00 d0       	rcall	.+0      	; 0x162c <GPIO_readPin+0x6>
    162c:	00 d0       	rcall	.+0      	; 0x162e <GPIO_readPin+0x8>
    162e:	0f 92       	push	r0
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
    1634:	8a 83       	std	Y+2, r24	; 0x02
    1636:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1638:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	88 30       	cpi	r24, 0x08	; 8
    163e:	08 f0       	brcs	.+2      	; 0x1642 <GPIO_readPin+0x1c>
    1640:	84 c0       	rjmp	.+264    	; 0x174a <GPIO_readPin+0x124>
    1642:	8a 81       	ldd	r24, Y+2	; 0x02
    1644:	84 30       	cpi	r24, 0x04	; 4
    1646:	08 f0       	brcs	.+2      	; 0x164a <GPIO_readPin+0x24>
    1648:	80 c0       	rjmp	.+256    	; 0x174a <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	3d 83       	std	Y+5, r19	; 0x05
    1652:	2c 83       	std	Y+4, r18	; 0x04
    1654:	4c 81       	ldd	r20, Y+4	; 0x04
    1656:	5d 81       	ldd	r21, Y+5	; 0x05
    1658:	41 30       	cpi	r20, 0x01	; 1
    165a:	51 05       	cpc	r21, r1
    165c:	79 f1       	breq	.+94     	; 0x16bc <GPIO_readPin+0x96>
    165e:	8c 81       	ldd	r24, Y+4	; 0x04
    1660:	9d 81       	ldd	r25, Y+5	; 0x05
    1662:	82 30       	cpi	r24, 0x02	; 2
    1664:	91 05       	cpc	r25, r1
    1666:	34 f4       	brge	.+12     	; 0x1674 <GPIO_readPin+0x4e>
    1668:	2c 81       	ldd	r18, Y+4	; 0x04
    166a:	3d 81       	ldd	r19, Y+5	; 0x05
    166c:	21 15       	cp	r18, r1
    166e:	31 05       	cpc	r19, r1
    1670:	69 f0       	breq	.+26     	; 0x168c <GPIO_readPin+0x66>
    1672:	6b c0       	rjmp	.+214    	; 0x174a <GPIO_readPin+0x124>
    1674:	4c 81       	ldd	r20, Y+4	; 0x04
    1676:	5d 81       	ldd	r21, Y+5	; 0x05
    1678:	42 30       	cpi	r20, 0x02	; 2
    167a:	51 05       	cpc	r21, r1
    167c:	b9 f1       	breq	.+110    	; 0x16ec <GPIO_readPin+0xc6>
    167e:	8c 81       	ldd	r24, Y+4	; 0x04
    1680:	9d 81       	ldd	r25, Y+5	; 0x05
    1682:	83 30       	cpi	r24, 0x03	; 3
    1684:	91 05       	cpc	r25, r1
    1686:	09 f4       	brne	.+2      	; 0x168a <GPIO_readPin+0x64>
    1688:	49 c0       	rjmp	.+146    	; 0x171c <GPIO_readPin+0xf6>
    168a:	5f c0       	rjmp	.+190    	; 0x174a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    168c:	e9 e3       	ldi	r30, 0x39	; 57
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	28 2f       	mov	r18, r24
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	8b 81       	ldd	r24, Y+3	; 0x03
    1698:	88 2f       	mov	r24, r24
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	a9 01       	movw	r20, r18
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <GPIO_readPin+0x7e>
    16a0:	55 95       	asr	r21
    16a2:	47 95       	ror	r20
    16a4:	8a 95       	dec	r24
    16a6:	e2 f7       	brpl	.-8      	; 0x16a0 <GPIO_readPin+0x7a>
    16a8:	ca 01       	movw	r24, r20
    16aa:	81 70       	andi	r24, 0x01	; 1
    16ac:	90 70       	andi	r25, 0x00	; 0
    16ae:	88 23       	and	r24, r24
    16b0:	19 f0       	breq	.+6      	; 0x16b8 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	89 83       	std	Y+1, r24	; 0x01
    16b6:	49 c0       	rjmp	.+146    	; 0x174a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    16b8:	19 82       	std	Y+1, r1	; 0x01
    16ba:	47 c0       	rjmp	.+142    	; 0x174a <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    16bc:	e6 e3       	ldi	r30, 0x36	; 54
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	8b 81       	ldd	r24, Y+3	; 0x03
    16c8:	88 2f       	mov	r24, r24
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	a9 01       	movw	r20, r18
    16ce:	02 c0       	rjmp	.+4      	; 0x16d4 <GPIO_readPin+0xae>
    16d0:	55 95       	asr	r21
    16d2:	47 95       	ror	r20
    16d4:	8a 95       	dec	r24
    16d6:	e2 f7       	brpl	.-8      	; 0x16d0 <GPIO_readPin+0xaa>
    16d8:	ca 01       	movw	r24, r20
    16da:	81 70       	andi	r24, 0x01	; 1
    16dc:	90 70       	andi	r25, 0x00	; 0
    16de:	88 23       	and	r24, r24
    16e0:	19 f0       	breq	.+6      	; 0x16e8 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	89 83       	std	Y+1, r24	; 0x01
    16e6:	31 c0       	rjmp	.+98     	; 0x174a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    16e8:	19 82       	std	Y+1, r1	; 0x01
    16ea:	2f c0       	rjmp	.+94     	; 0x174a <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    16ec:	e3 e3       	ldi	r30, 0x33	; 51
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	28 2f       	mov	r18, r24
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	88 2f       	mov	r24, r24
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	a9 01       	movw	r20, r18
    16fe:	02 c0       	rjmp	.+4      	; 0x1704 <GPIO_readPin+0xde>
    1700:	55 95       	asr	r21
    1702:	47 95       	ror	r20
    1704:	8a 95       	dec	r24
    1706:	e2 f7       	brpl	.-8      	; 0x1700 <GPIO_readPin+0xda>
    1708:	ca 01       	movw	r24, r20
    170a:	81 70       	andi	r24, 0x01	; 1
    170c:	90 70       	andi	r25, 0x00	; 0
    170e:	88 23       	and	r24, r24
    1710:	19 f0       	breq	.+6      	; 0x1718 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	89 83       	std	Y+1, r24	; 0x01
    1716:	19 c0       	rjmp	.+50     	; 0x174a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1718:	19 82       	std	Y+1, r1	; 0x01
    171a:	17 c0       	rjmp	.+46     	; 0x174a <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    171c:	e0 e3       	ldi	r30, 0x30	; 48
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	28 2f       	mov	r18, r24
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	88 2f       	mov	r24, r24
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	a9 01       	movw	r20, r18
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <GPIO_readPin+0x10e>
    1730:	55 95       	asr	r21
    1732:	47 95       	ror	r20
    1734:	8a 95       	dec	r24
    1736:	e2 f7       	brpl	.-8      	; 0x1730 <GPIO_readPin+0x10a>
    1738:	ca 01       	movw	r24, r20
    173a:	81 70       	andi	r24, 0x01	; 1
    173c:	90 70       	andi	r25, 0x00	; 0
    173e:	88 23       	and	r24, r24
    1740:	19 f0       	breq	.+6      	; 0x1748 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	89 83       	std	Y+1, r24	; 0x01
    1746:	01 c0       	rjmp	.+2      	; 0x174a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1748:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    174a:	89 81       	ldd	r24, Y+1	; 0x01
}
    174c:	0f 90       	pop	r0
    174e:	0f 90       	pop	r0
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	0f 90       	pop	r0
    1756:	cf 91       	pop	r28
    1758:	df 91       	pop	r29
    175a:	08 95       	ret

0000175c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    175c:	df 93       	push	r29
    175e:	cf 93       	push	r28
    1760:	00 d0       	rcall	.+0      	; 0x1762 <GPIO_setupPortDirection+0x6>
    1762:	00 d0       	rcall	.+0      	; 0x1764 <GPIO_setupPortDirection+0x8>
    1764:	cd b7       	in	r28, 0x3d	; 61
    1766:	de b7       	in	r29, 0x3e	; 62
    1768:	89 83       	std	Y+1, r24	; 0x01
    176a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    176c:	89 81       	ldd	r24, Y+1	; 0x01
    176e:	84 30       	cpi	r24, 0x04	; 4
    1770:	90 f5       	brcc	.+100    	; 0x17d6 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1772:	89 81       	ldd	r24, Y+1	; 0x01
    1774:	28 2f       	mov	r18, r24
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	3c 83       	std	Y+4, r19	; 0x04
    177a:	2b 83       	std	Y+3, r18	; 0x03
    177c:	8b 81       	ldd	r24, Y+3	; 0x03
    177e:	9c 81       	ldd	r25, Y+4	; 0x04
    1780:	81 30       	cpi	r24, 0x01	; 1
    1782:	91 05       	cpc	r25, r1
    1784:	d1 f0       	breq	.+52     	; 0x17ba <GPIO_setupPortDirection+0x5e>
    1786:	2b 81       	ldd	r18, Y+3	; 0x03
    1788:	3c 81       	ldd	r19, Y+4	; 0x04
    178a:	22 30       	cpi	r18, 0x02	; 2
    178c:	31 05       	cpc	r19, r1
    178e:	2c f4       	brge	.+10     	; 0x179a <GPIO_setupPortDirection+0x3e>
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	9c 81       	ldd	r25, Y+4	; 0x04
    1794:	00 97       	sbiw	r24, 0x00	; 0
    1796:	61 f0       	breq	.+24     	; 0x17b0 <GPIO_setupPortDirection+0x54>
    1798:	1e c0       	rjmp	.+60     	; 0x17d6 <GPIO_setupPortDirection+0x7a>
    179a:	2b 81       	ldd	r18, Y+3	; 0x03
    179c:	3c 81       	ldd	r19, Y+4	; 0x04
    179e:	22 30       	cpi	r18, 0x02	; 2
    17a0:	31 05       	cpc	r19, r1
    17a2:	81 f0       	breq	.+32     	; 0x17c4 <GPIO_setupPortDirection+0x68>
    17a4:	8b 81       	ldd	r24, Y+3	; 0x03
    17a6:	9c 81       	ldd	r25, Y+4	; 0x04
    17a8:	83 30       	cpi	r24, 0x03	; 3
    17aa:	91 05       	cpc	r25, r1
    17ac:	81 f0       	breq	.+32     	; 0x17ce <GPIO_setupPortDirection+0x72>
    17ae:	13 c0       	rjmp	.+38     	; 0x17d6 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    17b0:	ea e3       	ldi	r30, 0x3A	; 58
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	80 83       	st	Z, r24
    17b8:	0e c0       	rjmp	.+28     	; 0x17d6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    17ba:	e7 e3       	ldi	r30, 0x37	; 55
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	8a 81       	ldd	r24, Y+2	; 0x02
    17c0:	80 83       	st	Z, r24
    17c2:	09 c0       	rjmp	.+18     	; 0x17d6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    17c4:	e4 e3       	ldi	r30, 0x34	; 52
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	80 83       	st	Z, r24
    17cc:	04 c0       	rjmp	.+8      	; 0x17d6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    17ce:	e1 e3       	ldi	r30, 0x31	; 49
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	8a 81       	ldd	r24, Y+2	; 0x02
    17d4:	80 83       	st	Z, r24
			break;
		}
	}
}
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
    17da:	0f 90       	pop	r0
    17dc:	0f 90       	pop	r0
    17de:	cf 91       	pop	r28
    17e0:	df 91       	pop	r29
    17e2:	08 95       	ret

000017e4 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    17e4:	df 93       	push	r29
    17e6:	cf 93       	push	r28
    17e8:	00 d0       	rcall	.+0      	; 0x17ea <GPIO_writePort+0x6>
    17ea:	00 d0       	rcall	.+0      	; 0x17ec <GPIO_writePort+0x8>
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
    17f0:	89 83       	std	Y+1, r24	; 0x01
    17f2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	84 30       	cpi	r24, 0x04	; 4
    17f8:	90 f5       	brcc	.+100    	; 0x185e <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    17fa:	89 81       	ldd	r24, Y+1	; 0x01
    17fc:	28 2f       	mov	r18, r24
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	3c 83       	std	Y+4, r19	; 0x04
    1802:	2b 83       	std	Y+3, r18	; 0x03
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	9c 81       	ldd	r25, Y+4	; 0x04
    1808:	81 30       	cpi	r24, 0x01	; 1
    180a:	91 05       	cpc	r25, r1
    180c:	d1 f0       	breq	.+52     	; 0x1842 <GPIO_writePort+0x5e>
    180e:	2b 81       	ldd	r18, Y+3	; 0x03
    1810:	3c 81       	ldd	r19, Y+4	; 0x04
    1812:	22 30       	cpi	r18, 0x02	; 2
    1814:	31 05       	cpc	r19, r1
    1816:	2c f4       	brge	.+10     	; 0x1822 <GPIO_writePort+0x3e>
    1818:	8b 81       	ldd	r24, Y+3	; 0x03
    181a:	9c 81       	ldd	r25, Y+4	; 0x04
    181c:	00 97       	sbiw	r24, 0x00	; 0
    181e:	61 f0       	breq	.+24     	; 0x1838 <GPIO_writePort+0x54>
    1820:	1e c0       	rjmp	.+60     	; 0x185e <GPIO_writePort+0x7a>
    1822:	2b 81       	ldd	r18, Y+3	; 0x03
    1824:	3c 81       	ldd	r19, Y+4	; 0x04
    1826:	22 30       	cpi	r18, 0x02	; 2
    1828:	31 05       	cpc	r19, r1
    182a:	81 f0       	breq	.+32     	; 0x184c <GPIO_writePort+0x68>
    182c:	8b 81       	ldd	r24, Y+3	; 0x03
    182e:	9c 81       	ldd	r25, Y+4	; 0x04
    1830:	83 30       	cpi	r24, 0x03	; 3
    1832:	91 05       	cpc	r25, r1
    1834:	81 f0       	breq	.+32     	; 0x1856 <GPIO_writePort+0x72>
    1836:	13 c0       	rjmp	.+38     	; 0x185e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1838:	eb e3       	ldi	r30, 0x3B	; 59
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	80 83       	st	Z, r24
    1840:	0e c0       	rjmp	.+28     	; 0x185e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1842:	e8 e3       	ldi	r30, 0x38	; 56
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	80 83       	st	Z, r24
    184a:	09 c0       	rjmp	.+18     	; 0x185e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    184c:	e5 e3       	ldi	r30, 0x35	; 53
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	80 83       	st	Z, r24
    1854:	04 c0       	rjmp	.+8      	; 0x185e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1856:	e2 e3       	ldi	r30, 0x32	; 50
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	8a 81       	ldd	r24, Y+2	; 0x02
    185c:	80 83       	st	Z, r24
			break;
		}
	}
}
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	cf 91       	pop	r28
    1868:	df 91       	pop	r29
    186a:	08 95       	ret

0000186c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    186c:	df 93       	push	r29
    186e:	cf 93       	push	r28
    1870:	00 d0       	rcall	.+0      	; 0x1872 <GPIO_readPort+0x6>
    1872:	00 d0       	rcall	.+0      	; 0x1874 <GPIO_readPort+0x8>
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
    1878:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    187a:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    187c:	8a 81       	ldd	r24, Y+2	; 0x02
    187e:	84 30       	cpi	r24, 0x04	; 4
    1880:	90 f5       	brcc	.+100    	; 0x18e6 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1882:	8a 81       	ldd	r24, Y+2	; 0x02
    1884:	28 2f       	mov	r18, r24
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	3c 83       	std	Y+4, r19	; 0x04
    188a:	2b 83       	std	Y+3, r18	; 0x03
    188c:	8b 81       	ldd	r24, Y+3	; 0x03
    188e:	9c 81       	ldd	r25, Y+4	; 0x04
    1890:	81 30       	cpi	r24, 0x01	; 1
    1892:	91 05       	cpc	r25, r1
    1894:	d1 f0       	breq	.+52     	; 0x18ca <GPIO_readPort+0x5e>
    1896:	2b 81       	ldd	r18, Y+3	; 0x03
    1898:	3c 81       	ldd	r19, Y+4	; 0x04
    189a:	22 30       	cpi	r18, 0x02	; 2
    189c:	31 05       	cpc	r19, r1
    189e:	2c f4       	brge	.+10     	; 0x18aa <GPIO_readPort+0x3e>
    18a0:	8b 81       	ldd	r24, Y+3	; 0x03
    18a2:	9c 81       	ldd	r25, Y+4	; 0x04
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	61 f0       	breq	.+24     	; 0x18c0 <GPIO_readPort+0x54>
    18a8:	1e c0       	rjmp	.+60     	; 0x18e6 <GPIO_readPort+0x7a>
    18aa:	2b 81       	ldd	r18, Y+3	; 0x03
    18ac:	3c 81       	ldd	r19, Y+4	; 0x04
    18ae:	22 30       	cpi	r18, 0x02	; 2
    18b0:	31 05       	cpc	r19, r1
    18b2:	81 f0       	breq	.+32     	; 0x18d4 <GPIO_readPort+0x68>
    18b4:	8b 81       	ldd	r24, Y+3	; 0x03
    18b6:	9c 81       	ldd	r25, Y+4	; 0x04
    18b8:	83 30       	cpi	r24, 0x03	; 3
    18ba:	91 05       	cpc	r25, r1
    18bc:	81 f0       	breq	.+32     	; 0x18de <GPIO_readPort+0x72>
    18be:	13 c0       	rjmp	.+38     	; 0x18e6 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    18c0:	e9 e3       	ldi	r30, 0x39	; 57
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	89 83       	std	Y+1, r24	; 0x01
    18c8:	0e c0       	rjmp	.+28     	; 0x18e6 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    18ca:	e6 e3       	ldi	r30, 0x36	; 54
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	89 83       	std	Y+1, r24	; 0x01
    18d2:	09 c0       	rjmp	.+18     	; 0x18e6 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    18d4:	e3 e3       	ldi	r30, 0x33	; 51
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	89 83       	std	Y+1, r24	; 0x01
    18dc:	04 c0       	rjmp	.+8      	; 0x18e6 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    18de:	e0 e3       	ldi	r30, 0x30	; 48
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    18e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    18e8:	0f 90       	pop	r0
    18ea:	0f 90       	pop	r0
    18ec:	0f 90       	pop	r0
    18ee:	0f 90       	pop	r0
    18f0:	cf 91       	pop	r28
    18f2:	df 91       	pop	r29
    18f4:	08 95       	ret

000018f6 <LCD_init>:
 * Description :
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 8-bits.
 */
void LCD_init(void) {
    18f6:	df 93       	push	r29
    18f8:	cf 93       	push	r28
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
    18fe:	2e 97       	sbiw	r28, 0x0e	; 14
    1900:	0f b6       	in	r0, 0x3f	; 63
    1902:	f8 94       	cli
    1904:	de bf       	out	0x3e, r29	; 62
    1906:	0f be       	out	0x3f, r0	; 63
    1908:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    190a:	83 e0       	ldi	r24, 0x03	; 3
    190c:	60 e0       	ldi	r22, 0x00	; 0
    190e:	41 e0       	ldi	r20, 0x01	; 1
    1910:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    1914:	83 e0       	ldi	r24, 0x03	; 3
    1916:	61 e0       	ldi	r22, 0x01	; 1
    1918:	41 e0       	ldi	r20, 0x01	; 1
    191a:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    191e:	82 e0       	ldi	r24, 0x02	; 2
    1920:	6f ef       	ldi	r22, 0xFF	; 255
    1922:	0e 94 ae 0b 	call	0x175c	; 0x175c <GPIO_setupPortDirection>
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	a0 ea       	ldi	r26, 0xA0	; 160
    192c:	b1 e4       	ldi	r27, 0x41	; 65
    192e:	8b 87       	std	Y+11, r24	; 0x0b
    1930:	9c 87       	std	Y+12, r25	; 0x0c
    1932:	ad 87       	std	Y+13, r26	; 0x0d
    1934:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1936:	6b 85       	ldd	r22, Y+11	; 0x0b
    1938:	7c 85       	ldd	r23, Y+12	; 0x0c
    193a:	8d 85       	ldd	r24, Y+13	; 0x0d
    193c:	9e 85       	ldd	r25, Y+14	; 0x0e
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	4a e7       	ldi	r20, 0x7A	; 122
    1944:	55 e4       	ldi	r21, 0x45	; 69
    1946:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	8f 83       	std	Y+7, r24	; 0x07
    1950:	98 87       	std	Y+8, r25	; 0x08
    1952:	a9 87       	std	Y+9, r26	; 0x09
    1954:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1956:	6f 81       	ldd	r22, Y+7	; 0x07
    1958:	78 85       	ldd	r23, Y+8	; 0x08
    195a:	89 85       	ldd	r24, Y+9	; 0x09
    195c:	9a 85       	ldd	r25, Y+10	; 0x0a
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	40 e8       	ldi	r20, 0x80	; 128
    1964:	5f e3       	ldi	r21, 0x3F	; 63
    1966:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    196a:	88 23       	and	r24, r24
    196c:	2c f4       	brge	.+10     	; 0x1978 <LCD_init+0x82>
		__ticks = 1;
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	9e 83       	std	Y+6, r25	; 0x06
    1974:	8d 83       	std	Y+5, r24	; 0x05
    1976:	3f c0       	rjmp	.+126    	; 0x19f6 <LCD_init+0x100>
	else if (__tmp > 65535)
    1978:	6f 81       	ldd	r22, Y+7	; 0x07
    197a:	78 85       	ldd	r23, Y+8	; 0x08
    197c:	89 85       	ldd	r24, Y+9	; 0x09
    197e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	3f ef       	ldi	r19, 0xFF	; 255
    1984:	4f e7       	ldi	r20, 0x7F	; 127
    1986:	57 e4       	ldi	r21, 0x47	; 71
    1988:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    198c:	18 16       	cp	r1, r24
    198e:	4c f5       	brge	.+82     	; 0x19e2 <LCD_init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1990:	6b 85       	ldd	r22, Y+11	; 0x0b
    1992:	7c 85       	ldd	r23, Y+12	; 0x0c
    1994:	8d 85       	ldd	r24, Y+13	; 0x0d
    1996:	9e 85       	ldd	r25, Y+14	; 0x0e
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	40 e2       	ldi	r20, 0x20	; 32
    199e:	51 e4       	ldi	r21, 0x41	; 65
    19a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	bc 01       	movw	r22, r24
    19aa:	cd 01       	movw	r24, r26
    19ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	9e 83       	std	Y+6, r25	; 0x06
    19b6:	8d 83       	std	Y+5, r24	; 0x05
    19b8:	0f c0       	rjmp	.+30     	; 0x19d8 <LCD_init+0xe2>
    19ba:	80 e9       	ldi	r24, 0x90	; 144
    19bc:	91 e0       	ldi	r25, 0x01	; 1
    19be:	9c 83       	std	Y+4, r25	; 0x04
    19c0:	8b 83       	std	Y+3, r24	; 0x03
    19c2:	8b 81       	ldd	r24, Y+3	; 0x03
    19c4:	9c 81       	ldd	r25, Y+4	; 0x04
    19c6:	01 97       	sbiw	r24, 0x01	; 1
    19c8:	f1 f7       	brne	.-4      	; 0x19c6 <LCD_init+0xd0>
    19ca:	9c 83       	std	Y+4, r25	; 0x04
    19cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ce:	8d 81       	ldd	r24, Y+5	; 0x05
    19d0:	9e 81       	ldd	r25, Y+6	; 0x06
    19d2:	01 97       	sbiw	r24, 0x01	; 1
    19d4:	9e 83       	std	Y+6, r25	; 0x06
    19d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d8:	8d 81       	ldd	r24, Y+5	; 0x05
    19da:	9e 81       	ldd	r25, Y+6	; 0x06
    19dc:	00 97       	sbiw	r24, 0x00	; 0
    19de:	69 f7       	brne	.-38     	; 0x19ba <LCD_init+0xc4>
    19e0:	14 c0       	rjmp	.+40     	; 0x1a0a <LCD_init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19e2:	6f 81       	ldd	r22, Y+7	; 0x07
    19e4:	78 85       	ldd	r23, Y+8	; 0x08
    19e6:	89 85       	ldd	r24, Y+9	; 0x09
    19e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	9e 83       	std	Y+6, r25	; 0x06
    19f4:	8d 83       	std	Y+5, r24	; 0x05
    19f6:	8d 81       	ldd	r24, Y+5	; 0x05
    19f8:	9e 81       	ldd	r25, Y+6	; 0x06
    19fa:	9a 83       	std	Y+2, r25	; 0x02
    19fc:	89 83       	std	Y+1, r24	; 0x01
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	9a 81       	ldd	r25, Y+2	; 0x02
    1a02:	01 97       	sbiw	r24, 0x01	; 1
    1a04:	f1 f7       	brne	.-4      	; 0x1a02 <LCD_init+0x10c>
    1a06:	9a 83       	std	Y+2, r25	; 0x02
    1a08:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20); /* LCD Power ON delay always > 15ms */

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1a0a:	88 e3       	ldi	r24, 0x38	; 56
    1a0c:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1a10:	8c e0       	ldi	r24, 0x0C	; 12
    1a12:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <LCD_sendCommand>
}
    1a1c:	2e 96       	adiw	r28, 0x0e	; 14
    1a1e:	0f b6       	in	r0, 0x3f	; 63
    1a20:	f8 94       	cli
    1a22:	de bf       	out	0x3e, r29	; 62
    1a24:	0f be       	out	0x3f, r0	; 63
    1a26:	cd bf       	out	0x3d, r28	; 61
    1a28:	cf 91       	pop	r28
    1a2a:	df 91       	pop	r29
    1a2c:	08 95       	ret

00001a2e <LCD_sendCommand>:

/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command) {
    1a2e:	df 93       	push	r29
    1a30:	cf 93       	push	r28
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
    1a36:	e9 97       	sbiw	r28, 0x39	; 57
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	f8 94       	cli
    1a3c:	de bf       	out	0x3e, r29	; 62
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	cd bf       	out	0x3d, r28	; 61
    1a42:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW); /* Instruction Mode RS=0 */
    1a44:	83 e0       	ldi	r24, 0x03	; 3
    1a46:	60 e0       	ldi	r22, 0x00	; 0
    1a48:	40 e0       	ldi	r20, 0x00	; 0
    1a4a:	0e 94 28 0a 	call	0x1450	; 0x1450 <GPIO_writePin>
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	a0 e8       	ldi	r26, 0x80	; 128
    1a54:	bf e3       	ldi	r27, 0x3F	; 63
    1a56:	8d ab       	std	Y+53, r24	; 0x35
    1a58:	9e ab       	std	Y+54, r25	; 0x36
    1a5a:	af ab       	std	Y+55, r26	; 0x37
    1a5c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a5e:	6d a9       	ldd	r22, Y+53	; 0x35
    1a60:	7e a9       	ldd	r23, Y+54	; 0x36
    1a62:	8f a9       	ldd	r24, Y+55	; 0x37
    1a64:	98 ad       	ldd	r25, Y+56	; 0x38
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	4a e7       	ldi	r20, 0x7A	; 122
    1a6c:	55 e4       	ldi	r21, 0x45	; 69
    1a6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	89 ab       	std	Y+49, r24	; 0x31
    1a78:	9a ab       	std	Y+50, r25	; 0x32
    1a7a:	ab ab       	std	Y+51, r26	; 0x33
    1a7c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a7e:	69 a9       	ldd	r22, Y+49	; 0x31
    1a80:	7a a9       	ldd	r23, Y+50	; 0x32
    1a82:	8b a9       	ldd	r24, Y+51	; 0x33
    1a84:	9c a9       	ldd	r25, Y+52	; 0x34
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	40 e8       	ldi	r20, 0x80	; 128
    1a8c:	5f e3       	ldi	r21, 0x3F	; 63
    1a8e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a92:	88 23       	and	r24, r24
    1a94:	2c f4       	brge	.+10     	; 0x1aa0 <LCD_sendCommand+0x72>
		__ticks = 1;
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	98 ab       	std	Y+48, r25	; 0x30
    1a9c:	8f a7       	std	Y+47, r24	; 0x2f
    1a9e:	3f c0       	rjmp	.+126    	; 0x1b1e <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1aa0:	69 a9       	ldd	r22, Y+49	; 0x31
    1aa2:	7a a9       	ldd	r23, Y+50	; 0x32
    1aa4:	8b a9       	ldd	r24, Y+51	; 0x33
    1aa6:	9c a9       	ldd	r25, Y+52	; 0x34
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	3f ef       	ldi	r19, 0xFF	; 255
    1aac:	4f e7       	ldi	r20, 0x7F	; 127
    1aae:	57 e4       	ldi	r21, 0x47	; 71
    1ab0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ab4:	18 16       	cp	r1, r24
    1ab6:	4c f5       	brge	.+82     	; 0x1b0a <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab8:	6d a9       	ldd	r22, Y+53	; 0x35
    1aba:	7e a9       	ldd	r23, Y+54	; 0x36
    1abc:	8f a9       	ldd	r24, Y+55	; 0x37
    1abe:	98 ad       	ldd	r25, Y+56	; 0x38
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	40 e2       	ldi	r20, 0x20	; 32
    1ac6:	51 e4       	ldi	r21, 0x41	; 65
    1ac8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	bc 01       	movw	r22, r24
    1ad2:	cd 01       	movw	r24, r26
    1ad4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	98 ab       	std	Y+48, r25	; 0x30
    1ade:	8f a7       	std	Y+47, r24	; 0x2f
    1ae0:	0f c0       	rjmp	.+30     	; 0x1b00 <LCD_sendCommand+0xd2>
    1ae2:	80 e9       	ldi	r24, 0x90	; 144
    1ae4:	91 e0       	ldi	r25, 0x01	; 1
    1ae6:	9e a7       	std	Y+46, r25	; 0x2e
    1ae8:	8d a7       	std	Y+45, r24	; 0x2d
    1aea:	8d a5       	ldd	r24, Y+45	; 0x2d
    1aec:	9e a5       	ldd	r25, Y+46	; 0x2e
    1aee:	01 97       	sbiw	r24, 0x01	; 1
    1af0:	f1 f7       	brne	.-4      	; 0x1aee <LCD_sendCommand+0xc0>
    1af2:	9e a7       	std	Y+46, r25	; 0x2e
    1af4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1af8:	98 a9       	ldd	r25, Y+48	; 0x30
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	98 ab       	std	Y+48, r25	; 0x30
    1afe:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b00:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b02:	98 a9       	ldd	r25, Y+48	; 0x30
    1b04:	00 97       	sbiw	r24, 0x00	; 0
    1b06:	69 f7       	brne	.-38     	; 0x1ae2 <LCD_sendCommand+0xb4>
    1b08:	14 c0       	rjmp	.+40     	; 0x1b32 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b0a:	69 a9       	ldd	r22, Y+49	; 0x31
    1b0c:	7a a9       	ldd	r23, Y+50	; 0x32
    1b0e:	8b a9       	ldd	r24, Y+51	; 0x33
    1b10:	9c a9       	ldd	r25, Y+52	; 0x34
    1b12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22
    1b1a:	98 ab       	std	Y+48, r25	; 0x30
    1b1c:	8f a7       	std	Y+47, r24	; 0x2f
    1b1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b20:	98 a9       	ldd	r25, Y+48	; 0x30
    1b22:	9c a7       	std	Y+44, r25	; 0x2c
    1b24:	8b a7       	std	Y+43, r24	; 0x2b
    1b26:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b28:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b2a:	01 97       	sbiw	r24, 0x01	; 1
    1b2c:	f1 f7       	brne	.-4      	; 0x1b2a <LCD_sendCommand+0xfc>
    1b2e:	9c a7       	std	Y+44, r25	; 0x2c
    1b30:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    1b32:	83 e0       	ldi	r24, 0x03	; 3
    1b34:	61 e0       	ldi	r22, 0x01	; 1
    1b36:	41 e0       	ldi	r20, 0x01	; 1
    1b38:	0e 94 28 0a 	call	0x1450	; 0x1450 <GPIO_writePin>
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	a0 e8       	ldi	r26, 0x80	; 128
    1b42:	bf e3       	ldi	r27, 0x3F	; 63
    1b44:	8f a3       	std	Y+39, r24	; 0x27
    1b46:	98 a7       	std	Y+40, r25	; 0x28
    1b48:	a9 a7       	std	Y+41, r26	; 0x29
    1b4a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b4c:	6f a1       	ldd	r22, Y+39	; 0x27
    1b4e:	78 a5       	ldd	r23, Y+40	; 0x28
    1b50:	89 a5       	ldd	r24, Y+41	; 0x29
    1b52:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	4a e7       	ldi	r20, 0x7A	; 122
    1b5a:	55 e4       	ldi	r21, 0x45	; 69
    1b5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	8b a3       	std	Y+35, r24	; 0x23
    1b66:	9c a3       	std	Y+36, r25	; 0x24
    1b68:	ad a3       	std	Y+37, r26	; 0x25
    1b6a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b6c:	6b a1       	ldd	r22, Y+35	; 0x23
    1b6e:	7c a1       	ldd	r23, Y+36	; 0x24
    1b70:	8d a1       	ldd	r24, Y+37	; 0x25
    1b72:	9e a1       	ldd	r25, Y+38	; 0x26
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	40 e8       	ldi	r20, 0x80	; 128
    1b7a:	5f e3       	ldi	r21, 0x3F	; 63
    1b7c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b80:	88 23       	and	r24, r24
    1b82:	2c f4       	brge	.+10     	; 0x1b8e <LCD_sendCommand+0x160>
		__ticks = 1;
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	9a a3       	std	Y+34, r25	; 0x22
    1b8a:	89 a3       	std	Y+33, r24	; 0x21
    1b8c:	3f c0       	rjmp	.+126    	; 0x1c0c <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1b8e:	6b a1       	ldd	r22, Y+35	; 0x23
    1b90:	7c a1       	ldd	r23, Y+36	; 0x24
    1b92:	8d a1       	ldd	r24, Y+37	; 0x25
    1b94:	9e a1       	ldd	r25, Y+38	; 0x26
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	3f ef       	ldi	r19, 0xFF	; 255
    1b9a:	4f e7       	ldi	r20, 0x7F	; 127
    1b9c:	57 e4       	ldi	r21, 0x47	; 71
    1b9e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ba2:	18 16       	cp	r1, r24
    1ba4:	4c f5       	brge	.+82     	; 0x1bf8 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba6:	6f a1       	ldd	r22, Y+39	; 0x27
    1ba8:	78 a5       	ldd	r23, Y+40	; 0x28
    1baa:	89 a5       	ldd	r24, Y+41	; 0x29
    1bac:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	40 e2       	ldi	r20, 0x20	; 32
    1bb4:	51 e4       	ldi	r21, 0x41	; 65
    1bb6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	bc 01       	movw	r22, r24
    1bc0:	cd 01       	movw	r24, r26
    1bc2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bc6:	dc 01       	movw	r26, r24
    1bc8:	cb 01       	movw	r24, r22
    1bca:	9a a3       	std	Y+34, r25	; 0x22
    1bcc:	89 a3       	std	Y+33, r24	; 0x21
    1bce:	0f c0       	rjmp	.+30     	; 0x1bee <LCD_sendCommand+0x1c0>
    1bd0:	80 e9       	ldi	r24, 0x90	; 144
    1bd2:	91 e0       	ldi	r25, 0x01	; 1
    1bd4:	98 a3       	std	Y+32, r25	; 0x20
    1bd6:	8f 8f       	std	Y+31, r24	; 0x1f
    1bd8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bda:	98 a1       	ldd	r25, Y+32	; 0x20
    1bdc:	01 97       	sbiw	r24, 0x01	; 1
    1bde:	f1 f7       	brne	.-4      	; 0x1bdc <LCD_sendCommand+0x1ae>
    1be0:	98 a3       	std	Y+32, r25	; 0x20
    1be2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be4:	89 a1       	ldd	r24, Y+33	; 0x21
    1be6:	9a a1       	ldd	r25, Y+34	; 0x22
    1be8:	01 97       	sbiw	r24, 0x01	; 1
    1bea:	9a a3       	std	Y+34, r25	; 0x22
    1bec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bee:	89 a1       	ldd	r24, Y+33	; 0x21
    1bf0:	9a a1       	ldd	r25, Y+34	; 0x22
    1bf2:	00 97       	sbiw	r24, 0x00	; 0
    1bf4:	69 f7       	brne	.-38     	; 0x1bd0 <LCD_sendCommand+0x1a2>
    1bf6:	14 c0       	rjmp	.+40     	; 0x1c20 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bf8:	6b a1       	ldd	r22, Y+35	; 0x23
    1bfa:	7c a1       	ldd	r23, Y+36	; 0x24
    1bfc:	8d a1       	ldd	r24, Y+37	; 0x25
    1bfe:	9e a1       	ldd	r25, Y+38	; 0x26
    1c00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	9a a3       	std	Y+34, r25	; 0x22
    1c0a:	89 a3       	std	Y+33, r24	; 0x21
    1c0c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c0e:	9a a1       	ldd	r25, Y+34	; 0x22
    1c10:	9e 8f       	std	Y+30, r25	; 0x1e
    1c12:	8d 8f       	std	Y+29, r24	; 0x1d
    1c14:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c16:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c18:	01 97       	sbiw	r24, 0x01	; 1
    1c1a:	f1 f7       	brne	.-4      	; 0x1c18 <LCD_sendCommand+0x1ea>
    1c1c:	9e 8f       	std	Y+30, r25	; 0x1e
    1c1e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID, command); /* out the required command to the data bus D0 --> D7 */
    1c20:	82 e0       	ldi	r24, 0x02	; 2
    1c22:	69 ad       	ldd	r22, Y+57	; 0x39
    1c24:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <GPIO_writePort>
    1c28:	80 e0       	ldi	r24, 0x00	; 0
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	a0 e8       	ldi	r26, 0x80	; 128
    1c2e:	bf e3       	ldi	r27, 0x3F	; 63
    1c30:	89 8f       	std	Y+25, r24	; 0x19
    1c32:	9a 8f       	std	Y+26, r25	; 0x1a
    1c34:	ab 8f       	std	Y+27, r26	; 0x1b
    1c36:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c38:	69 8d       	ldd	r22, Y+25	; 0x19
    1c3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	4a e7       	ldi	r20, 0x7A	; 122
    1c46:	55 e4       	ldi	r21, 0x45	; 69
    1c48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	cb 01       	movw	r24, r22
    1c50:	8d 8b       	std	Y+21, r24	; 0x15
    1c52:	9e 8b       	std	Y+22, r25	; 0x16
    1c54:	af 8b       	std	Y+23, r26	; 0x17
    1c56:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c58:	6d 89       	ldd	r22, Y+21	; 0x15
    1c5a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c5c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c5e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	40 e8       	ldi	r20, 0x80	; 128
    1c66:	5f e3       	ldi	r21, 0x3F	; 63
    1c68:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c6c:	88 23       	and	r24, r24
    1c6e:	2c f4       	brge	.+10     	; 0x1c7a <LCD_sendCommand+0x24c>
		__ticks = 1;
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	9c 8b       	std	Y+20, r25	; 0x14
    1c76:	8b 8b       	std	Y+19, r24	; 0x13
    1c78:	3f c0       	rjmp	.+126    	; 0x1cf8 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1c7a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c7c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c80:	98 8d       	ldd	r25, Y+24	; 0x18
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	3f ef       	ldi	r19, 0xFF	; 255
    1c86:	4f e7       	ldi	r20, 0x7F	; 127
    1c88:	57 e4       	ldi	r21, 0x47	; 71
    1c8a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c8e:	18 16       	cp	r1, r24
    1c90:	4c f5       	brge	.+82     	; 0x1ce4 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c92:	69 8d       	ldd	r22, Y+25	; 0x19
    1c94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	40 e2       	ldi	r20, 0x20	; 32
    1ca0:	51 e4       	ldi	r21, 0x41	; 65
    1ca2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	bc 01       	movw	r22, r24
    1cac:	cd 01       	movw	r24, r26
    1cae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	9c 8b       	std	Y+20, r25	; 0x14
    1cb8:	8b 8b       	std	Y+19, r24	; 0x13
    1cba:	0f c0       	rjmp	.+30     	; 0x1cda <LCD_sendCommand+0x2ac>
    1cbc:	80 e9       	ldi	r24, 0x90	; 144
    1cbe:	91 e0       	ldi	r25, 0x01	; 1
    1cc0:	9a 8b       	std	Y+18, r25	; 0x12
    1cc2:	89 8b       	std	Y+17, r24	; 0x11
    1cc4:	89 89       	ldd	r24, Y+17	; 0x11
    1cc6:	9a 89       	ldd	r25, Y+18	; 0x12
    1cc8:	01 97       	sbiw	r24, 0x01	; 1
    1cca:	f1 f7       	brne	.-4      	; 0x1cc8 <LCD_sendCommand+0x29a>
    1ccc:	9a 8b       	std	Y+18, r25	; 0x12
    1cce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd0:	8b 89       	ldd	r24, Y+19	; 0x13
    1cd2:	9c 89       	ldd	r25, Y+20	; 0x14
    1cd4:	01 97       	sbiw	r24, 0x01	; 1
    1cd6:	9c 8b       	std	Y+20, r25	; 0x14
    1cd8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cda:	8b 89       	ldd	r24, Y+19	; 0x13
    1cdc:	9c 89       	ldd	r25, Y+20	; 0x14
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	69 f7       	brne	.-38     	; 0x1cbc <LCD_sendCommand+0x28e>
    1ce2:	14 c0       	rjmp	.+40     	; 0x1d0c <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ce6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ce8:	8f 89       	ldd	r24, Y+23	; 0x17
    1cea:	98 8d       	ldd	r25, Y+24	; 0x18
    1cec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	9c 8b       	std	Y+20, r25	; 0x14
    1cf6:	8b 8b       	std	Y+19, r24	; 0x13
    1cf8:	8b 89       	ldd	r24, Y+19	; 0x13
    1cfa:	9c 89       	ldd	r25, Y+20	; 0x14
    1cfc:	98 8b       	std	Y+16, r25	; 0x10
    1cfe:	8f 87       	std	Y+15, r24	; 0x0f
    1d00:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d02:	98 89       	ldd	r25, Y+16	; 0x10
    1d04:	01 97       	sbiw	r24, 0x01	; 1
    1d06:	f1 f7       	brne	.-4      	; 0x1d04 <LCD_sendCommand+0x2d6>
    1d08:	98 8b       	std	Y+16, r25	; 0x10
    1d0a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    1d0c:	83 e0       	ldi	r24, 0x03	; 3
    1d0e:	61 e0       	ldi	r22, 0x01	; 1
    1d10:	40 e0       	ldi	r20, 0x00	; 0
    1d12:	0e 94 28 0a 	call	0x1450	; 0x1450 <GPIO_writePin>
    1d16:	80 e0       	ldi	r24, 0x00	; 0
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	a0 e8       	ldi	r26, 0x80	; 128
    1d1c:	bf e3       	ldi	r27, 0x3F	; 63
    1d1e:	8b 87       	std	Y+11, r24	; 0x0b
    1d20:	9c 87       	std	Y+12, r25	; 0x0c
    1d22:	ad 87       	std	Y+13, r26	; 0x0d
    1d24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	4a e7       	ldi	r20, 0x7A	; 122
    1d34:	55 e4       	ldi	r21, 0x45	; 69
    1d36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	8f 83       	std	Y+7, r24	; 0x07
    1d40:	98 87       	std	Y+8, r25	; 0x08
    1d42:	a9 87       	std	Y+9, r26	; 0x09
    1d44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d46:	6f 81       	ldd	r22, Y+7	; 0x07
    1d48:	78 85       	ldd	r23, Y+8	; 0x08
    1d4a:	89 85       	ldd	r24, Y+9	; 0x09
    1d4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	40 e8       	ldi	r20, 0x80	; 128
    1d54:	5f e3       	ldi	r21, 0x3F	; 63
    1d56:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d5a:	88 23       	and	r24, r24
    1d5c:	2c f4       	brge	.+10     	; 0x1d68 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	9e 83       	std	Y+6, r25	; 0x06
    1d64:	8d 83       	std	Y+5, r24	; 0x05
    1d66:	3f c0       	rjmp	.+126    	; 0x1de6 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1d68:	6f 81       	ldd	r22, Y+7	; 0x07
    1d6a:	78 85       	ldd	r23, Y+8	; 0x08
    1d6c:	89 85       	ldd	r24, Y+9	; 0x09
    1d6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	3f ef       	ldi	r19, 0xFF	; 255
    1d74:	4f e7       	ldi	r20, 0x7F	; 127
    1d76:	57 e4       	ldi	r21, 0x47	; 71
    1d78:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d7c:	18 16       	cp	r1, r24
    1d7e:	4c f5       	brge	.+82     	; 0x1dd2 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d80:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d82:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	40 e2       	ldi	r20, 0x20	; 32
    1d8e:	51 e4       	ldi	r21, 0x41	; 65
    1d90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	bc 01       	movw	r22, r24
    1d9a:	cd 01       	movw	r24, r26
    1d9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	9e 83       	std	Y+6, r25	; 0x06
    1da6:	8d 83       	std	Y+5, r24	; 0x05
    1da8:	0f c0       	rjmp	.+30     	; 0x1dc8 <LCD_sendCommand+0x39a>
    1daa:	80 e9       	ldi	r24, 0x90	; 144
    1dac:	91 e0       	ldi	r25, 0x01	; 1
    1dae:	9c 83       	std	Y+4, r25	; 0x04
    1db0:	8b 83       	std	Y+3, r24	; 0x03
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	9c 81       	ldd	r25, Y+4	; 0x04
    1db6:	01 97       	sbiw	r24, 0x01	; 1
    1db8:	f1 f7       	brne	.-4      	; 0x1db6 <LCD_sendCommand+0x388>
    1dba:	9c 83       	std	Y+4, r25	; 0x04
    1dbc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc2:	01 97       	sbiw	r24, 0x01	; 1
    1dc4:	9e 83       	std	Y+6, r25	; 0x06
    1dc6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dca:	9e 81       	ldd	r25, Y+6	; 0x06
    1dcc:	00 97       	sbiw	r24, 0x00	; 0
    1dce:	69 f7       	brne	.-38     	; 0x1daa <LCD_sendCommand+0x37c>
    1dd0:	14 c0       	rjmp	.+40     	; 0x1dfa <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dd2:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd4:	78 85       	ldd	r23, Y+8	; 0x08
    1dd6:	89 85       	ldd	r24, Y+9	; 0x09
    1dd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	9e 83       	std	Y+6, r25	; 0x06
    1de4:	8d 83       	std	Y+5, r24	; 0x05
    1de6:	8d 81       	ldd	r24, Y+5	; 0x05
    1de8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dea:	9a 83       	std	Y+2, r25	; 0x02
    1dec:	89 83       	std	Y+1, r24	; 0x01
    1dee:	89 81       	ldd	r24, Y+1	; 0x01
    1df0:	9a 81       	ldd	r25, Y+2	; 0x02
    1df2:	01 97       	sbiw	r24, 0x01	; 1
    1df4:	f1 f7       	brne	.-4      	; 0x1df2 <LCD_sendCommand+0x3c4>
    1df6:	9a 83       	std	Y+2, r25	; 0x02
    1df8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1dfa:	e9 96       	adiw	r28, 0x39	; 57
    1dfc:	0f b6       	in	r0, 0x3f	; 63
    1dfe:	f8 94       	cli
    1e00:	de bf       	out	0x3e, r29	; 62
    1e02:	0f be       	out	0x3f, r0	; 63
    1e04:	cd bf       	out	0x3d, r28	; 61
    1e06:	cf 91       	pop	r28
    1e08:	df 91       	pop	r29
    1e0a:	08 95       	ret

00001e0c <LCD_displayCharacter>:

/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data) {
    1e0c:	df 93       	push	r29
    1e0e:	cf 93       	push	r28
    1e10:	cd b7       	in	r28, 0x3d	; 61
    1e12:	de b7       	in	r29, 0x3e	; 62
    1e14:	e9 97       	sbiw	r28, 0x39	; 57
    1e16:	0f b6       	in	r0, 0x3f	; 63
    1e18:	f8 94       	cli
    1e1a:	de bf       	out	0x3e, r29	; 62
    1e1c:	0f be       	out	0x3f, r0	; 63
    1e1e:	cd bf       	out	0x3d, r28	; 61
    1e20:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH); /* Data Mode RS=1 */
    1e22:	83 e0       	ldi	r24, 0x03	; 3
    1e24:	60 e0       	ldi	r22, 0x00	; 0
    1e26:	41 e0       	ldi	r20, 0x01	; 1
    1e28:	0e 94 28 0a 	call	0x1450	; 0x1450 <GPIO_writePin>
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	a0 e8       	ldi	r26, 0x80	; 128
    1e32:	bf e3       	ldi	r27, 0x3F	; 63
    1e34:	8d ab       	std	Y+53, r24	; 0x35
    1e36:	9e ab       	std	Y+54, r25	; 0x36
    1e38:	af ab       	std	Y+55, r26	; 0x37
    1e3a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e3c:	6d a9       	ldd	r22, Y+53	; 0x35
    1e3e:	7e a9       	ldd	r23, Y+54	; 0x36
    1e40:	8f a9       	ldd	r24, Y+55	; 0x37
    1e42:	98 ad       	ldd	r25, Y+56	; 0x38
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	4a e7       	ldi	r20, 0x7A	; 122
    1e4a:	55 e4       	ldi	r21, 0x45	; 69
    1e4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	89 ab       	std	Y+49, r24	; 0x31
    1e56:	9a ab       	std	Y+50, r25	; 0x32
    1e58:	ab ab       	std	Y+51, r26	; 0x33
    1e5a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e5c:	69 a9       	ldd	r22, Y+49	; 0x31
    1e5e:	7a a9       	ldd	r23, Y+50	; 0x32
    1e60:	8b a9       	ldd	r24, Y+51	; 0x33
    1e62:	9c a9       	ldd	r25, Y+52	; 0x34
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	40 e8       	ldi	r20, 0x80	; 128
    1e6a:	5f e3       	ldi	r21, 0x3F	; 63
    1e6c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e70:	88 23       	and	r24, r24
    1e72:	2c f4       	brge	.+10     	; 0x1e7e <LCD_displayCharacter+0x72>
		__ticks = 1;
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	98 ab       	std	Y+48, r25	; 0x30
    1e7a:	8f a7       	std	Y+47, r24	; 0x2f
    1e7c:	3f c0       	rjmp	.+126    	; 0x1efc <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1e7e:	69 a9       	ldd	r22, Y+49	; 0x31
    1e80:	7a a9       	ldd	r23, Y+50	; 0x32
    1e82:	8b a9       	ldd	r24, Y+51	; 0x33
    1e84:	9c a9       	ldd	r25, Y+52	; 0x34
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	3f ef       	ldi	r19, 0xFF	; 255
    1e8a:	4f e7       	ldi	r20, 0x7F	; 127
    1e8c:	57 e4       	ldi	r21, 0x47	; 71
    1e8e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e92:	18 16       	cp	r1, r24
    1e94:	4c f5       	brge	.+82     	; 0x1ee8 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e96:	6d a9       	ldd	r22, Y+53	; 0x35
    1e98:	7e a9       	ldd	r23, Y+54	; 0x36
    1e9a:	8f a9       	ldd	r24, Y+55	; 0x37
    1e9c:	98 ad       	ldd	r25, Y+56	; 0x38
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	40 e2       	ldi	r20, 0x20	; 32
    1ea4:	51 e4       	ldi	r21, 0x41	; 65
    1ea6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	bc 01       	movw	r22, r24
    1eb0:	cd 01       	movw	r24, r26
    1eb2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	98 ab       	std	Y+48, r25	; 0x30
    1ebc:	8f a7       	std	Y+47, r24	; 0x2f
    1ebe:	0f c0       	rjmp	.+30     	; 0x1ede <LCD_displayCharacter+0xd2>
    1ec0:	80 e9       	ldi	r24, 0x90	; 144
    1ec2:	91 e0       	ldi	r25, 0x01	; 1
    1ec4:	9e a7       	std	Y+46, r25	; 0x2e
    1ec6:	8d a7       	std	Y+45, r24	; 0x2d
    1ec8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1eca:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	f1 f7       	brne	.-4      	; 0x1ecc <LCD_displayCharacter+0xc0>
    1ed0:	9e a7       	std	Y+46, r25	; 0x2e
    1ed2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ed6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ed8:	01 97       	sbiw	r24, 0x01	; 1
    1eda:	98 ab       	std	Y+48, r25	; 0x30
    1edc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ede:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ee0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ee2:	00 97       	sbiw	r24, 0x00	; 0
    1ee4:	69 f7       	brne	.-38     	; 0x1ec0 <LCD_displayCharacter+0xb4>
    1ee6:	14 c0       	rjmp	.+40     	; 0x1f10 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee8:	69 a9       	ldd	r22, Y+49	; 0x31
    1eea:	7a a9       	ldd	r23, Y+50	; 0x32
    1eec:	8b a9       	ldd	r24, Y+51	; 0x33
    1eee:	9c a9       	ldd	r25, Y+52	; 0x34
    1ef0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	98 ab       	std	Y+48, r25	; 0x30
    1efa:	8f a7       	std	Y+47, r24	; 0x2f
    1efc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1efe:	98 a9       	ldd	r25, Y+48	; 0x30
    1f00:	9c a7       	std	Y+44, r25	; 0x2c
    1f02:	8b a7       	std	Y+43, r24	; 0x2b
    1f04:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f06:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	f1 f7       	brne	.-4      	; 0x1f08 <LCD_displayCharacter+0xfc>
    1f0c:	9c a7       	std	Y+44, r25	; 0x2c
    1f0e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    1f10:	83 e0       	ldi	r24, 0x03	; 3
    1f12:	61 e0       	ldi	r22, 0x01	; 1
    1f14:	41 e0       	ldi	r20, 0x01	; 1
    1f16:	0e 94 28 0a 	call	0x1450	; 0x1450 <GPIO_writePin>
    1f1a:	80 e0       	ldi	r24, 0x00	; 0
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	a0 e8       	ldi	r26, 0x80	; 128
    1f20:	bf e3       	ldi	r27, 0x3F	; 63
    1f22:	8f a3       	std	Y+39, r24	; 0x27
    1f24:	98 a7       	std	Y+40, r25	; 0x28
    1f26:	a9 a7       	std	Y+41, r26	; 0x29
    1f28:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f2a:	6f a1       	ldd	r22, Y+39	; 0x27
    1f2c:	78 a5       	ldd	r23, Y+40	; 0x28
    1f2e:	89 a5       	ldd	r24, Y+41	; 0x29
    1f30:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	4a e7       	ldi	r20, 0x7A	; 122
    1f38:	55 e4       	ldi	r21, 0x45	; 69
    1f3a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f3e:	dc 01       	movw	r26, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	8b a3       	std	Y+35, r24	; 0x23
    1f44:	9c a3       	std	Y+36, r25	; 0x24
    1f46:	ad a3       	std	Y+37, r26	; 0x25
    1f48:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f4a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f4c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f4e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f50:	9e a1       	ldd	r25, Y+38	; 0x26
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	40 e8       	ldi	r20, 0x80	; 128
    1f58:	5f e3       	ldi	r21, 0x3F	; 63
    1f5a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f5e:	88 23       	and	r24, r24
    1f60:	2c f4       	brge	.+10     	; 0x1f6c <LCD_displayCharacter+0x160>
		__ticks = 1;
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	9a a3       	std	Y+34, r25	; 0x22
    1f68:	89 a3       	std	Y+33, r24	; 0x21
    1f6a:	3f c0       	rjmp	.+126    	; 0x1fea <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1f6c:	6b a1       	ldd	r22, Y+35	; 0x23
    1f6e:	7c a1       	ldd	r23, Y+36	; 0x24
    1f70:	8d a1       	ldd	r24, Y+37	; 0x25
    1f72:	9e a1       	ldd	r25, Y+38	; 0x26
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	3f ef       	ldi	r19, 0xFF	; 255
    1f78:	4f e7       	ldi	r20, 0x7F	; 127
    1f7a:	57 e4       	ldi	r21, 0x47	; 71
    1f7c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f80:	18 16       	cp	r1, r24
    1f82:	4c f5       	brge	.+82     	; 0x1fd6 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f84:	6f a1       	ldd	r22, Y+39	; 0x27
    1f86:	78 a5       	ldd	r23, Y+40	; 0x28
    1f88:	89 a5       	ldd	r24, Y+41	; 0x29
    1f8a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	40 e2       	ldi	r20, 0x20	; 32
    1f92:	51 e4       	ldi	r21, 0x41	; 65
    1f94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	bc 01       	movw	r22, r24
    1f9e:	cd 01       	movw	r24, r26
    1fa0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	9a a3       	std	Y+34, r25	; 0x22
    1faa:	89 a3       	std	Y+33, r24	; 0x21
    1fac:	0f c0       	rjmp	.+30     	; 0x1fcc <LCD_displayCharacter+0x1c0>
    1fae:	80 e9       	ldi	r24, 0x90	; 144
    1fb0:	91 e0       	ldi	r25, 0x01	; 1
    1fb2:	98 a3       	std	Y+32, r25	; 0x20
    1fb4:	8f 8f       	std	Y+31, r24	; 0x1f
    1fb6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fb8:	98 a1       	ldd	r25, Y+32	; 0x20
    1fba:	01 97       	sbiw	r24, 0x01	; 1
    1fbc:	f1 f7       	brne	.-4      	; 0x1fba <LCD_displayCharacter+0x1ae>
    1fbe:	98 a3       	std	Y+32, r25	; 0x20
    1fc0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc2:	89 a1       	ldd	r24, Y+33	; 0x21
    1fc4:	9a a1       	ldd	r25, Y+34	; 0x22
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	9a a3       	std	Y+34, r25	; 0x22
    1fca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fcc:	89 a1       	ldd	r24, Y+33	; 0x21
    1fce:	9a a1       	ldd	r25, Y+34	; 0x22
    1fd0:	00 97       	sbiw	r24, 0x00	; 0
    1fd2:	69 f7       	brne	.-38     	; 0x1fae <LCD_displayCharacter+0x1a2>
    1fd4:	14 c0       	rjmp	.+40     	; 0x1ffe <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd6:	6b a1       	ldd	r22, Y+35	; 0x23
    1fd8:	7c a1       	ldd	r23, Y+36	; 0x24
    1fda:	8d a1       	ldd	r24, Y+37	; 0x25
    1fdc:	9e a1       	ldd	r25, Y+38	; 0x26
    1fde:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	9a a3       	std	Y+34, r25	; 0x22
    1fe8:	89 a3       	std	Y+33, r24	; 0x21
    1fea:	89 a1       	ldd	r24, Y+33	; 0x21
    1fec:	9a a1       	ldd	r25, Y+34	; 0x22
    1fee:	9e 8f       	std	Y+30, r25	; 0x1e
    1ff0:	8d 8f       	std	Y+29, r24	; 0x1d
    1ff2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ff4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ff6:	01 97       	sbiw	r24, 0x01	; 1
    1ff8:	f1 f7       	brne	.-4      	; 0x1ff6 <LCD_displayCharacter+0x1ea>
    1ffa:	9e 8f       	std	Y+30, r25	; 0x1e
    1ffc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID, data); /* out the required command to the data bus D0 --> D7 */
    1ffe:	82 e0       	ldi	r24, 0x02	; 2
    2000:	69 ad       	ldd	r22, Y+57	; 0x39
    2002:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <GPIO_writePort>
    2006:	80 e0       	ldi	r24, 0x00	; 0
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	a0 e8       	ldi	r26, 0x80	; 128
    200c:	bf e3       	ldi	r27, 0x3F	; 63
    200e:	89 8f       	std	Y+25, r24	; 0x19
    2010:	9a 8f       	std	Y+26, r25	; 0x1a
    2012:	ab 8f       	std	Y+27, r26	; 0x1b
    2014:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2016:	69 8d       	ldd	r22, Y+25	; 0x19
    2018:	7a 8d       	ldd	r23, Y+26	; 0x1a
    201a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    201c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	4a e7       	ldi	r20, 0x7A	; 122
    2024:	55 e4       	ldi	r21, 0x45	; 69
    2026:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	8d 8b       	std	Y+21, r24	; 0x15
    2030:	9e 8b       	std	Y+22, r25	; 0x16
    2032:	af 8b       	std	Y+23, r26	; 0x17
    2034:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2036:	6d 89       	ldd	r22, Y+21	; 0x15
    2038:	7e 89       	ldd	r23, Y+22	; 0x16
    203a:	8f 89       	ldd	r24, Y+23	; 0x17
    203c:	98 8d       	ldd	r25, Y+24	; 0x18
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	40 e8       	ldi	r20, 0x80	; 128
    2044:	5f e3       	ldi	r21, 0x3F	; 63
    2046:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    204a:	88 23       	and	r24, r24
    204c:	2c f4       	brge	.+10     	; 0x2058 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	9c 8b       	std	Y+20, r25	; 0x14
    2054:	8b 8b       	std	Y+19, r24	; 0x13
    2056:	3f c0       	rjmp	.+126    	; 0x20d6 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2058:	6d 89       	ldd	r22, Y+21	; 0x15
    205a:	7e 89       	ldd	r23, Y+22	; 0x16
    205c:	8f 89       	ldd	r24, Y+23	; 0x17
    205e:	98 8d       	ldd	r25, Y+24	; 0x18
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	3f ef       	ldi	r19, 0xFF	; 255
    2064:	4f e7       	ldi	r20, 0x7F	; 127
    2066:	57 e4       	ldi	r21, 0x47	; 71
    2068:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    206c:	18 16       	cp	r1, r24
    206e:	4c f5       	brge	.+82     	; 0x20c2 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2070:	69 8d       	ldd	r22, Y+25	; 0x19
    2072:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2074:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2076:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	40 e2       	ldi	r20, 0x20	; 32
    207e:	51 e4       	ldi	r21, 0x41	; 65
    2080:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2084:	dc 01       	movw	r26, r24
    2086:	cb 01       	movw	r24, r22
    2088:	bc 01       	movw	r22, r24
    208a:	cd 01       	movw	r24, r26
    208c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	9c 8b       	std	Y+20, r25	; 0x14
    2096:	8b 8b       	std	Y+19, r24	; 0x13
    2098:	0f c0       	rjmp	.+30     	; 0x20b8 <LCD_displayCharacter+0x2ac>
    209a:	80 e9       	ldi	r24, 0x90	; 144
    209c:	91 e0       	ldi	r25, 0x01	; 1
    209e:	9a 8b       	std	Y+18, r25	; 0x12
    20a0:	89 8b       	std	Y+17, r24	; 0x11
    20a2:	89 89       	ldd	r24, Y+17	; 0x11
    20a4:	9a 89       	ldd	r25, Y+18	; 0x12
    20a6:	01 97       	sbiw	r24, 0x01	; 1
    20a8:	f1 f7       	brne	.-4      	; 0x20a6 <LCD_displayCharacter+0x29a>
    20aa:	9a 8b       	std	Y+18, r25	; 0x12
    20ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ae:	8b 89       	ldd	r24, Y+19	; 0x13
    20b0:	9c 89       	ldd	r25, Y+20	; 0x14
    20b2:	01 97       	sbiw	r24, 0x01	; 1
    20b4:	9c 8b       	std	Y+20, r25	; 0x14
    20b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b8:	8b 89       	ldd	r24, Y+19	; 0x13
    20ba:	9c 89       	ldd	r25, Y+20	; 0x14
    20bc:	00 97       	sbiw	r24, 0x00	; 0
    20be:	69 f7       	brne	.-38     	; 0x209a <LCD_displayCharacter+0x28e>
    20c0:	14 c0       	rjmp	.+40     	; 0x20ea <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c2:	6d 89       	ldd	r22, Y+21	; 0x15
    20c4:	7e 89       	ldd	r23, Y+22	; 0x16
    20c6:	8f 89       	ldd	r24, Y+23	; 0x17
    20c8:	98 8d       	ldd	r25, Y+24	; 0x18
    20ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20ce:	dc 01       	movw	r26, r24
    20d0:	cb 01       	movw	r24, r22
    20d2:	9c 8b       	std	Y+20, r25	; 0x14
    20d4:	8b 8b       	std	Y+19, r24	; 0x13
    20d6:	8b 89       	ldd	r24, Y+19	; 0x13
    20d8:	9c 89       	ldd	r25, Y+20	; 0x14
    20da:	98 8b       	std	Y+16, r25	; 0x10
    20dc:	8f 87       	std	Y+15, r24	; 0x0f
    20de:	8f 85       	ldd	r24, Y+15	; 0x0f
    20e0:	98 89       	ldd	r25, Y+16	; 0x10
    20e2:	01 97       	sbiw	r24, 0x01	; 1
    20e4:	f1 f7       	brne	.-4      	; 0x20e2 <LCD_displayCharacter+0x2d6>
    20e6:	98 8b       	std	Y+16, r25	; 0x10
    20e8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    20ea:	83 e0       	ldi	r24, 0x03	; 3
    20ec:	61 e0       	ldi	r22, 0x01	; 1
    20ee:	40 e0       	ldi	r20, 0x00	; 0
    20f0:	0e 94 28 0a 	call	0x1450	; 0x1450 <GPIO_writePin>
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	a0 e8       	ldi	r26, 0x80	; 128
    20fa:	bf e3       	ldi	r27, 0x3F	; 63
    20fc:	8b 87       	std	Y+11, r24	; 0x0b
    20fe:	9c 87       	std	Y+12, r25	; 0x0c
    2100:	ad 87       	std	Y+13, r26	; 0x0d
    2102:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2104:	6b 85       	ldd	r22, Y+11	; 0x0b
    2106:	7c 85       	ldd	r23, Y+12	; 0x0c
    2108:	8d 85       	ldd	r24, Y+13	; 0x0d
    210a:	9e 85       	ldd	r25, Y+14	; 0x0e
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	4a e7       	ldi	r20, 0x7A	; 122
    2112:	55 e4       	ldi	r21, 0x45	; 69
    2114:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	8f 83       	std	Y+7, r24	; 0x07
    211e:	98 87       	std	Y+8, r25	; 0x08
    2120:	a9 87       	std	Y+9, r26	; 0x09
    2122:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2124:	6f 81       	ldd	r22, Y+7	; 0x07
    2126:	78 85       	ldd	r23, Y+8	; 0x08
    2128:	89 85       	ldd	r24, Y+9	; 0x09
    212a:	9a 85       	ldd	r25, Y+10	; 0x0a
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	40 e8       	ldi	r20, 0x80	; 128
    2132:	5f e3       	ldi	r21, 0x3F	; 63
    2134:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2138:	88 23       	and	r24, r24
    213a:	2c f4       	brge	.+10     	; 0x2146 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	9e 83       	std	Y+6, r25	; 0x06
    2142:	8d 83       	std	Y+5, r24	; 0x05
    2144:	3f c0       	rjmp	.+126    	; 0x21c4 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2146:	6f 81       	ldd	r22, Y+7	; 0x07
    2148:	78 85       	ldd	r23, Y+8	; 0x08
    214a:	89 85       	ldd	r24, Y+9	; 0x09
    214c:	9a 85       	ldd	r25, Y+10	; 0x0a
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	3f ef       	ldi	r19, 0xFF	; 255
    2152:	4f e7       	ldi	r20, 0x7F	; 127
    2154:	57 e4       	ldi	r21, 0x47	; 71
    2156:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    215a:	18 16       	cp	r1, r24
    215c:	4c f5       	brge	.+82     	; 0x21b0 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    215e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2160:	7c 85       	ldd	r23, Y+12	; 0x0c
    2162:	8d 85       	ldd	r24, Y+13	; 0x0d
    2164:	9e 85       	ldd	r25, Y+14	; 0x0e
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	40 e2       	ldi	r20, 0x20	; 32
    216c:	51 e4       	ldi	r21, 0x41	; 65
    216e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2172:	dc 01       	movw	r26, r24
    2174:	cb 01       	movw	r24, r22
    2176:	bc 01       	movw	r22, r24
    2178:	cd 01       	movw	r24, r26
    217a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	9e 83       	std	Y+6, r25	; 0x06
    2184:	8d 83       	std	Y+5, r24	; 0x05
    2186:	0f c0       	rjmp	.+30     	; 0x21a6 <LCD_displayCharacter+0x39a>
    2188:	80 e9       	ldi	r24, 0x90	; 144
    218a:	91 e0       	ldi	r25, 0x01	; 1
    218c:	9c 83       	std	Y+4, r25	; 0x04
    218e:	8b 83       	std	Y+3, r24	; 0x03
    2190:	8b 81       	ldd	r24, Y+3	; 0x03
    2192:	9c 81       	ldd	r25, Y+4	; 0x04
    2194:	01 97       	sbiw	r24, 0x01	; 1
    2196:	f1 f7       	brne	.-4      	; 0x2194 <LCD_displayCharacter+0x388>
    2198:	9c 83       	std	Y+4, r25	; 0x04
    219a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    219c:	8d 81       	ldd	r24, Y+5	; 0x05
    219e:	9e 81       	ldd	r25, Y+6	; 0x06
    21a0:	01 97       	sbiw	r24, 0x01	; 1
    21a2:	9e 83       	std	Y+6, r25	; 0x06
    21a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a6:	8d 81       	ldd	r24, Y+5	; 0x05
    21a8:	9e 81       	ldd	r25, Y+6	; 0x06
    21aa:	00 97       	sbiw	r24, 0x00	; 0
    21ac:	69 f7       	brne	.-38     	; 0x2188 <LCD_displayCharacter+0x37c>
    21ae:	14 c0       	rjmp	.+40     	; 0x21d8 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b0:	6f 81       	ldd	r22, Y+7	; 0x07
    21b2:	78 85       	ldd	r23, Y+8	; 0x08
    21b4:	89 85       	ldd	r24, Y+9	; 0x09
    21b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	9e 83       	std	Y+6, r25	; 0x06
    21c2:	8d 83       	std	Y+5, r24	; 0x05
    21c4:	8d 81       	ldd	r24, Y+5	; 0x05
    21c6:	9e 81       	ldd	r25, Y+6	; 0x06
    21c8:	9a 83       	std	Y+2, r25	; 0x02
    21ca:	89 83       	std	Y+1, r24	; 0x01
    21cc:	89 81       	ldd	r24, Y+1	; 0x01
    21ce:	9a 81       	ldd	r25, Y+2	; 0x02
    21d0:	01 97       	sbiw	r24, 0x01	; 1
    21d2:	f1 f7       	brne	.-4      	; 0x21d0 <LCD_displayCharacter+0x3c4>
    21d4:	9a 83       	std	Y+2, r25	; 0x02
    21d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    21d8:	e9 96       	adiw	r28, 0x39	; 57
    21da:	0f b6       	in	r0, 0x3f	; 63
    21dc:	f8 94       	cli
    21de:	de bf       	out	0x3e, r29	; 62
    21e0:	0f be       	out	0x3f, r0	; 63
    21e2:	cd bf       	out	0x3d, r28	; 61
    21e4:	cf 91       	pop	r28
    21e6:	df 91       	pop	r29
    21e8:	08 95       	ret

000021ea <LCD_displayString>:

/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str) {
    21ea:	df 93       	push	r29
    21ec:	cf 93       	push	r28
    21ee:	00 d0       	rcall	.+0      	; 0x21f0 <LCD_displayString+0x6>
    21f0:	0f 92       	push	r0
    21f2:	cd b7       	in	r28, 0x3d	; 61
    21f4:	de b7       	in	r29, 0x3e	; 62
    21f6:	9b 83       	std	Y+3, r25	; 0x03
    21f8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    21fa:	19 82       	std	Y+1, r1	; 0x01
    21fc:	0e c0       	rjmp	.+28     	; 0x221a <LCD_displayString+0x30>
	while (Str[i] != '\0') {
		LCD_displayCharacter(Str[i]);
    21fe:	89 81       	ldd	r24, Y+1	; 0x01
    2200:	28 2f       	mov	r18, r24
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	8a 81       	ldd	r24, Y+2	; 0x02
    2206:	9b 81       	ldd	r25, Y+3	; 0x03
    2208:	fc 01       	movw	r30, r24
    220a:	e2 0f       	add	r30, r18
    220c:	f3 1f       	adc	r31, r19
    220e:	80 81       	ld	r24, Z
    2210:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LCD_displayCharacter>
		i++;
    2214:	89 81       	ldd	r24, Y+1	; 0x01
    2216:	8f 5f       	subi	r24, 0xFF	; 255
    2218:	89 83       	std	Y+1, r24	; 0x01
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str) {
	uint8 i = 0;
	while (Str[i] != '\0') {
    221a:	89 81       	ldd	r24, Y+1	; 0x01
    221c:	28 2f       	mov	r18, r24
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	8a 81       	ldd	r24, Y+2	; 0x02
    2222:	9b 81       	ldd	r25, Y+3	; 0x03
    2224:	fc 01       	movw	r30, r24
    2226:	e2 0f       	add	r30, r18
    2228:	f3 1f       	adc	r31, r19
    222a:	80 81       	ld	r24, Z
    222c:	88 23       	and	r24, r24
    222e:	39 f7       	brne	.-50     	; 0x21fe <LCD_displayString+0x14>
	 {
	 LCD_displayCharacter(*Str);
	 Str++;
	 }
	 *********************************************************/
}
    2230:	0f 90       	pop	r0
    2232:	0f 90       	pop	r0
    2234:	0f 90       	pop	r0
    2236:	cf 91       	pop	r28
    2238:	df 91       	pop	r29
    223a:	08 95       	ret

0000223c <LCD_moveCursor>:

/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row, uint8 col) {
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	00 d0       	rcall	.+0      	; 0x2242 <LCD_moveCursor+0x6>
    2242:	00 d0       	rcall	.+0      	; 0x2244 <LCD_moveCursor+0x8>
    2244:	0f 92       	push	r0
    2246:	cd b7       	in	r28, 0x3d	; 61
    2248:	de b7       	in	r29, 0x3e	; 62
    224a:	8a 83       	std	Y+2, r24	; 0x02
    224c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch (row) {
    224e:	8a 81       	ldd	r24, Y+2	; 0x02
    2250:	28 2f       	mov	r18, r24
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	3d 83       	std	Y+5, r19	; 0x05
    2256:	2c 83       	std	Y+4, r18	; 0x04
    2258:	8c 81       	ldd	r24, Y+4	; 0x04
    225a:	9d 81       	ldd	r25, Y+5	; 0x05
    225c:	81 30       	cpi	r24, 0x01	; 1
    225e:	91 05       	cpc	r25, r1
    2260:	c1 f0       	breq	.+48     	; 0x2292 <LCD_moveCursor+0x56>
    2262:	2c 81       	ldd	r18, Y+4	; 0x04
    2264:	3d 81       	ldd	r19, Y+5	; 0x05
    2266:	22 30       	cpi	r18, 0x02	; 2
    2268:	31 05       	cpc	r19, r1
    226a:	2c f4       	brge	.+10     	; 0x2276 <LCD_moveCursor+0x3a>
    226c:	8c 81       	ldd	r24, Y+4	; 0x04
    226e:	9d 81       	ldd	r25, Y+5	; 0x05
    2270:	00 97       	sbiw	r24, 0x00	; 0
    2272:	61 f0       	breq	.+24     	; 0x228c <LCD_moveCursor+0x50>
    2274:	19 c0       	rjmp	.+50     	; 0x22a8 <LCD_moveCursor+0x6c>
    2276:	2c 81       	ldd	r18, Y+4	; 0x04
    2278:	3d 81       	ldd	r19, Y+5	; 0x05
    227a:	22 30       	cpi	r18, 0x02	; 2
    227c:	31 05       	cpc	r19, r1
    227e:	69 f0       	breq	.+26     	; 0x229a <LCD_moveCursor+0x5e>
    2280:	8c 81       	ldd	r24, Y+4	; 0x04
    2282:	9d 81       	ldd	r25, Y+5	; 0x05
    2284:	83 30       	cpi	r24, 0x03	; 3
    2286:	91 05       	cpc	r25, r1
    2288:	61 f0       	breq	.+24     	; 0x22a2 <LCD_moveCursor+0x66>
    228a:	0e c0       	rjmp	.+28     	; 0x22a8 <LCD_moveCursor+0x6c>
	case 0:
		lcd_memory_address = col;
    228c:	8b 81       	ldd	r24, Y+3	; 0x03
    228e:	89 83       	std	Y+1, r24	; 0x01
    2290:	0b c0       	rjmp	.+22     	; 0x22a8 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address = col + 0x40;
    2292:	8b 81       	ldd	r24, Y+3	; 0x03
    2294:	80 5c       	subi	r24, 0xC0	; 192
    2296:	89 83       	std	Y+1, r24	; 0x01
    2298:	07 c0       	rjmp	.+14     	; 0x22a8 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address = col + 0x10;
    229a:	8b 81       	ldd	r24, Y+3	; 0x03
    229c:	80 5f       	subi	r24, 0xF0	; 240
    229e:	89 83       	std	Y+1, r24	; 0x01
    22a0:	03 c0       	rjmp	.+6      	; 0x22a8 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address = col + 0x50;
    22a2:	8b 81       	ldd	r24, Y+3	; 0x03
    22a4:	80 5b       	subi	r24, 0xB0	; 176
    22a6:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	80 68       	ori	r24, 0x80	; 128
    22ac:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <LCD_sendCommand>
}
    22b0:	0f 90       	pop	r0
    22b2:	0f 90       	pop	r0
    22b4:	0f 90       	pop	r0
    22b6:	0f 90       	pop	r0
    22b8:	0f 90       	pop	r0
    22ba:	cf 91       	pop	r28
    22bc:	df 91       	pop	r29
    22be:	08 95       	ret

000022c0 <LCD_displayStringRowColumn>:

/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str) {
    22c0:	df 93       	push	r29
    22c2:	cf 93       	push	r28
    22c4:	00 d0       	rcall	.+0      	; 0x22c6 <LCD_displayStringRowColumn+0x6>
    22c6:	00 d0       	rcall	.+0      	; 0x22c8 <LCD_displayStringRowColumn+0x8>
    22c8:	cd b7       	in	r28, 0x3d	; 61
    22ca:	de b7       	in	r29, 0x3e	; 62
    22cc:	89 83       	std	Y+1, r24	; 0x01
    22ce:	6a 83       	std	Y+2, r22	; 0x02
    22d0:	5c 83       	std	Y+4, r21	; 0x04
    22d2:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, col); /* go to to the required LCD position */
    22d4:	89 81       	ldd	r24, Y+1	; 0x01
    22d6:	6a 81       	ldd	r22, Y+2	; 0x02
    22d8:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    22dc:	8b 81       	ldd	r24, Y+3	; 0x03
    22de:	9c 81       	ldd	r25, Y+4	; 0x04
    22e0:	0e 94 f5 10 	call	0x21ea	; 0x21ea <LCD_displayString>
}
    22e4:	0f 90       	pop	r0
    22e6:	0f 90       	pop	r0
    22e8:	0f 90       	pop	r0
    22ea:	0f 90       	pop	r0
    22ec:	cf 91       	pop	r28
    22ee:	df 91       	pop	r29
    22f0:	08 95       	ret

000022f2 <LCD_intgerToString>:

/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data) {
    22f2:	df 93       	push	r29
    22f4:	cf 93       	push	r28
    22f6:	cd b7       	in	r28, 0x3d	; 61
    22f8:	de b7       	in	r29, 0x3e	; 62
    22fa:	62 97       	sbiw	r28, 0x12	; 18
    22fc:	0f b6       	in	r0, 0x3f	; 63
    22fe:	f8 94       	cli
    2300:	de bf       	out	0x3e, r29	; 62
    2302:	0f be       	out	0x3f, r0	; 63
    2304:	cd bf       	out	0x3d, r28	; 61
    2306:	9a 8b       	std	Y+18, r25	; 0x12
    2308:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ascii result */
	itoa(data, buff, 10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    230a:	89 89       	ldd	r24, Y+17	; 0x11
    230c:	9a 89       	ldd	r25, Y+18	; 0x12
    230e:	9e 01       	movw	r18, r28
    2310:	2f 5f       	subi	r18, 0xFF	; 255
    2312:	3f 4f       	sbci	r19, 0xFF	; 255
    2314:	b9 01       	movw	r22, r18
    2316:	4a e0       	ldi	r20, 0x0A	; 10
    2318:	50 e0       	ldi	r21, 0x00	; 0
    231a:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <itoa>
	LCD_displayString(buff); /* Display the string */
    231e:	ce 01       	movw	r24, r28
    2320:	01 96       	adiw	r24, 0x01	; 1
    2322:	0e 94 f5 10 	call	0x21ea	; 0x21ea <LCD_displayString>
}
    2326:	62 96       	adiw	r28, 0x12	; 18
    2328:	0f b6       	in	r0, 0x3f	; 63
    232a:	f8 94       	cli
    232c:	de bf       	out	0x3e, r29	; 62
    232e:	0f be       	out	0x3f, r0	; 63
    2330:	cd bf       	out	0x3d, r28	; 61
    2332:	cf 91       	pop	r28
    2334:	df 91       	pop	r29
    2336:	08 95       	ret

00002338 <LCD_clearScreen>:

/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void) {
    2338:	df 93       	push	r29
    233a:	cf 93       	push	r28
    233c:	cd b7       	in	r28, 0x3d	; 61
    233e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <LCD_sendCommand>
}
    2346:	cf 91       	pop	r28
    2348:	df 91       	pop	r29
    234a:	08 95       	ret

0000234c <LM35_getTemperature>:

/*
 * Description :
 * Function responsible for calculate the temperature from the ADC digital value.
 */
uint8 LM35_getTemperature(void) {
    234c:	df 93       	push	r29
    234e:	cf 93       	push	r28
    2350:	cd b7       	in	r28, 0x3d	; 61
    2352:	de b7       	in	r29, 0x3e	; 62
    2354:	2f 97       	sbiw	r28, 0x0f	; 15
    2356:	0f b6       	in	r0, 0x3f	; 63
    2358:	f8 94       	cli
    235a:	de bf       	out	0x3e, r29	; 62
    235c:	0f be       	out	0x3f, r0	; 63
    235e:	cd bf       	out	0x3d, r28	; 61
	ADC_init();
    2360:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <ADC_init>

	uint8 temp_value = 0;
    2364:	1f 86       	std	Y+15, r1	; 0x0f
    2366:	80 e0       	ldi	r24, 0x00	; 0
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	a0 ee       	ldi	r26, 0xE0	; 224
    236c:	b0 e4       	ldi	r27, 0x40	; 64
    236e:	8b 87       	std	Y+11, r24	; 0x0b
    2370:	9c 87       	std	Y+12, r25	; 0x0c
    2372:	ad 87       	std	Y+13, r26	; 0x0d
    2374:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2376:	6b 85       	ldd	r22, Y+11	; 0x0b
    2378:	7c 85       	ldd	r23, Y+12	; 0x0c
    237a:	8d 85       	ldd	r24, Y+13	; 0x0d
    237c:	9e 85       	ldd	r25, Y+14	; 0x0e
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	4a e7       	ldi	r20, 0x7A	; 122
    2384:	55 e4       	ldi	r21, 0x45	; 69
    2386:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	8f 83       	std	Y+7, r24	; 0x07
    2390:	98 87       	std	Y+8, r25	; 0x08
    2392:	a9 87       	std	Y+9, r26	; 0x09
    2394:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2396:	6f 81       	ldd	r22, Y+7	; 0x07
    2398:	78 85       	ldd	r23, Y+8	; 0x08
    239a:	89 85       	ldd	r24, Y+9	; 0x09
    239c:	9a 85       	ldd	r25, Y+10	; 0x0a
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	40 e8       	ldi	r20, 0x80	; 128
    23a4:	5f e3       	ldi	r21, 0x3F	; 63
    23a6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    23aa:	88 23       	and	r24, r24
    23ac:	2c f4       	brge	.+10     	; 0x23b8 <LM35_getTemperature+0x6c>
		__ticks = 1;
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	9e 83       	std	Y+6, r25	; 0x06
    23b4:	8d 83       	std	Y+5, r24	; 0x05
    23b6:	3f c0       	rjmp	.+126    	; 0x2436 <LM35_getTemperature+0xea>
	else if (__tmp > 65535)
    23b8:	6f 81       	ldd	r22, Y+7	; 0x07
    23ba:	78 85       	ldd	r23, Y+8	; 0x08
    23bc:	89 85       	ldd	r24, Y+9	; 0x09
    23be:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	3f ef       	ldi	r19, 0xFF	; 255
    23c4:	4f e7       	ldi	r20, 0x7F	; 127
    23c6:	57 e4       	ldi	r21, 0x47	; 71
    23c8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    23cc:	18 16       	cp	r1, r24
    23ce:	4c f5       	brge	.+82     	; 0x2422 <LM35_getTemperature+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    23d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    23d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    23d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	40 e2       	ldi	r20, 0x20	; 32
    23de:	51 e4       	ldi	r21, 0x41	; 65
    23e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	bc 01       	movw	r22, r24
    23ea:	cd 01       	movw	r24, r26
    23ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23f0:	dc 01       	movw	r26, r24
    23f2:	cb 01       	movw	r24, r22
    23f4:	9e 83       	std	Y+6, r25	; 0x06
    23f6:	8d 83       	std	Y+5, r24	; 0x05
    23f8:	0f c0       	rjmp	.+30     	; 0x2418 <LM35_getTemperature+0xcc>
    23fa:	80 e9       	ldi	r24, 0x90	; 144
    23fc:	91 e0       	ldi	r25, 0x01	; 1
    23fe:	9c 83       	std	Y+4, r25	; 0x04
    2400:	8b 83       	std	Y+3, r24	; 0x03
    2402:	8b 81       	ldd	r24, Y+3	; 0x03
    2404:	9c 81       	ldd	r25, Y+4	; 0x04
    2406:	01 97       	sbiw	r24, 0x01	; 1
    2408:	f1 f7       	brne	.-4      	; 0x2406 <LM35_getTemperature+0xba>
    240a:	9c 83       	std	Y+4, r25	; 0x04
    240c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    240e:	8d 81       	ldd	r24, Y+5	; 0x05
    2410:	9e 81       	ldd	r25, Y+6	; 0x06
    2412:	01 97       	sbiw	r24, 0x01	; 1
    2414:	9e 83       	std	Y+6, r25	; 0x06
    2416:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2418:	8d 81       	ldd	r24, Y+5	; 0x05
    241a:	9e 81       	ldd	r25, Y+6	; 0x06
    241c:	00 97       	sbiw	r24, 0x00	; 0
    241e:	69 f7       	brne	.-38     	; 0x23fa <LM35_getTemperature+0xae>
    2420:	14 c0       	rjmp	.+40     	; 0x244a <LM35_getTemperature+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2422:	6f 81       	ldd	r22, Y+7	; 0x07
    2424:	78 85       	ldd	r23, Y+8	; 0x08
    2426:	89 85       	ldd	r24, Y+9	; 0x09
    2428:	9a 85       	ldd	r25, Y+10	; 0x0a
    242a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	9e 83       	std	Y+6, r25	; 0x06
    2434:	8d 83       	std	Y+5, r24	; 0x05
    2436:	8d 81       	ldd	r24, Y+5	; 0x05
    2438:	9e 81       	ldd	r25, Y+6	; 0x06
    243a:	9a 83       	std	Y+2, r25	; 0x02
    243c:	89 83       	std	Y+1, r24	; 0x01
    243e:	89 81       	ldd	r24, Y+1	; 0x01
    2440:	9a 81       	ldd	r25, Y+2	; 0x02
    2442:	01 97       	sbiw	r24, 0x01	; 1
    2444:	f1 f7       	brne	.-4      	; 0x2442 <LM35_getTemperature+0xf6>
    2446:	9a 83       	std	Y+2, r25	; 0x02
    2448:	89 83       	std	Y+1, r24	; 0x01

	/* Make delay for some time until g_adcResult value is updated with the ADC interrupt */
	_delay_ms(7);

	/* Calculate the temperature from the ADC value*/
	temp_value = (uint8) (((uint32) ADC_readChannel(SENSOR_CHANNEL_ID)
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	0e 94 06 09 	call	0x120c	; 0x120c <ADC_readChannel>
    2450:	cc 01       	movw	r24, r24
    2452:	a0 e0       	ldi	r26, 0x00	; 0
    2454:	b0 e0       	ldi	r27, 0x00	; 0
    2456:	26 e9       	ldi	r18, 0x96	; 150
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	40 e0       	ldi	r20, 0x00	; 0
    245c:	50 e0       	ldi	r21, 0x00	; 0
    245e:	bc 01       	movw	r22, r24
    2460:	cd 01       	movw	r24, r26
    2462:	0e 94 65 13 	call	0x26ca	; 0x26ca <__mulsi3>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	bc 01       	movw	r22, r24
    246c:	cd 01       	movw	r24, r26
    246e:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	bc 01       	movw	r22, r24
    2478:	cd 01       	movw	r24, r26
    247a:	2a e0       	ldi	r18, 0x0A	; 10
    247c:	37 ed       	ldi	r19, 0xD7	; 215
    247e:	43 e2       	ldi	r20, 0x23	; 35
    2480:	50 e4       	ldi	r21, 0x40	; 64
    2482:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	bc 01       	movw	r22, r24
    248c:	cd 01       	movw	r24, r26
    248e:	20 e0       	ldi	r18, 0x00	; 0
    2490:	30 ed       	ldi	r19, 0xD0	; 208
    2492:	4f eb       	ldi	r20, 0xBF	; 191
    2494:	54 e4       	ldi	r21, 0x44	; 68
    2496:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	bc 01       	movw	r22, r24
    24a0:	cd 01       	movw	r24, r26
    24a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	8f 87       	std	Y+15, r24	; 0x0f
			* SENSOR_MAX_TEMPERATURE * ADC_REF_VOLT_VALUE)
			/ (ADC_MAXIMUM_VALUE * SENSOR_MAX_VOLT_VALUE));

	return temp_value;
    24ac:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    24ae:	2f 96       	adiw	r28, 0x0f	; 15
    24b0:	0f b6       	in	r0, 0x3f	; 63
    24b2:	f8 94       	cli
    24b4:	de bf       	out	0x3e, r29	; 62
    24b6:	0f be       	out	0x3f, r0	; 63
    24b8:	cd bf       	out	0x3d, r28	; 61
    24ba:	cf 91       	pop	r28
    24bc:	df 91       	pop	r29
    24be:	08 95       	ret

000024c0 <main>:

/*****************************************************************************************************************************
 * 														Main Function
 ******************************************************************************************************************************/

int main() {
    24c0:	df 93       	push	r29
    24c2:	cf 93       	push	r28
    24c4:	00 d0       	rcall	.+0      	; 0x24c6 <main+0x6>
    24c6:	00 d0       	rcall	.+0      	; 0x24c8 <main+0x8>
    24c8:	0f 92       	push	r0
    24ca:	cd b7       	in	r28, 0x3d	; 61
    24cc:	de b7       	in	r29, 0x3e	; 62

	//declaring variables and flags and initializing them
	uint16 lightIntensity = 0;
    24ce:	1d 82       	std	Y+5, r1	; 0x05
    24d0:	1c 82       	std	Y+4, r1	; 0x04
	uint16 roomTemp = 0;
    24d2:	1b 82       	std	Y+3, r1	; 0x03
    24d4:	1a 82       	std	Y+2, r1	; 0x02
	uint8 fanFLag = 0;
    24d6:	19 82       	std	Y+1, r1	; 0x01

	//Set the global interrupt enable
	SREG |= (1 << 7);
    24d8:	af e5       	ldi	r26, 0x5F	; 95
    24da:	b0 e0       	ldi	r27, 0x00	; 0
    24dc:	ef e5       	ldi	r30, 0x5F	; 95
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	80 81       	ld	r24, Z
    24e2:	80 68       	ori	r24, 0x80	; 128
    24e4:	8c 93       	st	X, r24

	//Set the pin direction of the LM35 and LDR sensors as inputs
	GPIO_setupPinDirection(LM35_PORT, LM35_PIN, PIN_INPUT);
    24e6:	80 e0       	ldi	r24, 0x00	; 0
    24e8:	61 e0       	ldi	r22, 0x01	; 1
    24ea:	40 e0       	ldi	r20, 0x00	; 0
    24ec:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LDR_PORT, LDR_PIN, PIN_INPUT);
    24f0:	80 e0       	ldi	r24, 0x00	; 0
    24f2:	60 e0       	ldi	r22, 0x00	; 0
    24f4:	40 e0       	ldi	r20, 0x00	; 0
    24f6:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_setupPinDirection>

	//initialize the drivers
	LED_init();
    24fa:	0e 94 97 08 	call	0x112e	; 0x112e <LED_init>
	LCD_init();
    24fe:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <LCD_init>
	DC_MOTOR_init();
    2502:	0e 94 38 07 	call	0xe70	; 0xe70 <DC_MOTOR_init>
	FlameSensor_init();
    2506:	0e 94 b9 07 	call	0xf72	; 0xf72 <FlameSensor_init>
	BUZZER_init();
    250a:	0e 94 0f 07 	call	0xe1e	; 0xe1e <BUZZER_init>

	while (1) {

		//check if there is Flame
		if (FlameSensor_getValue()) {
    250e:	0e 94 c5 07 	call	0xf8a	; 0xf8a <FlameSensor_getValue>
    2512:	88 23       	and	r24, r24
    2514:	99 f0       	breq	.+38     	; 0x253c <main+0x7c>
			LCD_moveCursor(0, 0);
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	60 e0       	ldi	r22, 0x00	; 0
    251a:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_moveCursor>
			LCD_displayString("Critical Alert!");
    251e:	80 e6       	ldi	r24, 0x60	; 96
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	0e 94 f5 10 	call	0x21ea	; 0x21ea <LCD_displayString>
			LCD_moveCursor(1, 0);
    2526:	81 e0       	ldi	r24, 0x01	; 1
    2528:	60 e0       	ldi	r22, 0x00	; 0
    252a:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_moveCursor>
			LCD_displayString("                ");
    252e:	80 e7       	ldi	r24, 0x70	; 112
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	0e 94 f5 10 	call	0x21ea	; 0x21ea <LCD_displayString>
			BUZZER_On();
    2536:	0e 94 20 07 	call	0xe40	; 0xe40 <BUZZER_On>
    253a:	33 c0       	rjmp	.+102    	; 0x25a2 <main+0xe2>

		} else {
			BUZZER_Off();
    253c:	0e 94 2c 07 	call	0xe58	; 0xe58 <BUZZER_Off>

			//Start to show data on LCD
			if (fanFLag == 0) {
    2540:	89 81       	ldd	r24, Y+1	; 0x01
    2542:	88 23       	and	r24, r24
    2544:	29 f4       	brne	.+10     	; 0x2550 <main+0x90>
				LCD_displayString("FAN is OFF     ");
    2546:	81 e8       	ldi	r24, 0x81	; 129
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	0e 94 f5 10 	call	0x21ea	; 0x21ea <LCD_displayString>
    254e:	04 c0       	rjmp	.+8      	; 0x2558 <main+0x98>
			} else
				LCD_displayString("Fan is ON      ");
    2550:	81 e9       	ldi	r24, 0x91	; 145
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	0e 94 f5 10 	call	0x21ea	; 0x21ea <LCD_displayString>

			LCD_moveCursor(1, 0);
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	60 e0       	ldi	r22, 0x00	; 0
    255c:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_moveCursor>
			LCD_displayString("T=");
    2560:	81 ea       	ldi	r24, 0xA1	; 161
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	0e 94 f5 10 	call	0x21ea	; 0x21ea <LCD_displayString>
			LCD_intgerToString(LM35_getTemperature());
    2568:	0e 94 a6 11 	call	0x234c	; 0x234c <LM35_getTemperature>
    256c:	88 2f       	mov	r24, r24
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	0e 94 79 11 	call	0x22f2	; 0x22f2 <LCD_intgerToString>
			LCD_displayCharacter('C');
    2574:	83 e4       	ldi	r24, 0x43	; 67
    2576:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LCD_displayCharacter>
			LCD_moveCursor(1, 8);
    257a:	81 e0       	ldi	r24, 0x01	; 1
    257c:	68 e0       	ldi	r22, 0x08	; 8
    257e:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_moveCursor>
			LCD_displayString("LDR:");
    2582:	84 ea       	ldi	r24, 0xA4	; 164
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	0e 94 f5 10 	call	0x21ea	; 0x21ea <LCD_displayString>
			LCD_intgerToString(LDR_getLightIntensity());
    258a:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LDR_getLightIntensity>
    258e:	0e 94 79 11 	call	0x22f2	; 0x22f2 <LCD_intgerToString>
			LCD_displayString("%  ");
    2592:	89 ea       	ldi	r24, 0xA9	; 169
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	0e 94 f5 10 	call	0x21ea	; 0x21ea <LCD_displayString>
			LCD_moveCursor(0, 0);
    259a:	80 e0       	ldi	r24, 0x00	; 0
    259c:	60 e0       	ldi	r22, 0x00	; 0
    259e:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_moveCursor>
			o Intensity 16–50%: Red and Green LEDs turn ON.
			o Intensity 51–70%: Only the Red LED turns ON.
			o Intensity > 70%: All LEDs are turned OFF.
		*/

		lightIntensity = LDR_getLightIntensity();
    25a2:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LDR_getLightIntensity>
    25a6:	9d 83       	std	Y+5, r25	; 0x05
    25a8:	8c 83       	std	Y+4, r24	; 0x04

		if (lightIntensity <= 15) {
    25aa:	8c 81       	ldd	r24, Y+4	; 0x04
    25ac:	9d 81       	ldd	r25, Y+5	; 0x05
    25ae:	80 31       	cpi	r24, 0x10	; 16
    25b0:	91 05       	cpc	r25, r1
    25b2:	50 f4       	brcc	.+20     	; 0x25c8 <main+0x108>
			LED_on(GREEN);
    25b4:	86 e0       	ldi	r24, 0x06	; 6
    25b6:	0e 94 bc 08 	call	0x1178	; 0x1178 <LED_on>
			LED_on(BLUE);
    25ba:	87 e0       	ldi	r24, 0x07	; 7
    25bc:	0e 94 bc 08 	call	0x1178	; 0x1178 <LED_on>
			LED_on(RED);
    25c0:	85 e0       	ldi	r24, 0x05	; 5
    25c2:	0e 94 bc 08 	call	0x1178	; 0x1178 <LED_on>
    25c6:	36 c0       	rjmp	.+108    	; 0x2634 <main+0x174>
		}

		else if (lightIntensity > 15 && lightIntensity <= 50) {
    25c8:	8c 81       	ldd	r24, Y+4	; 0x04
    25ca:	9d 81       	ldd	r25, Y+5	; 0x05
    25cc:	80 31       	cpi	r24, 0x10	; 16
    25ce:	91 05       	cpc	r25, r1
    25d0:	78 f0       	brcs	.+30     	; 0x25f0 <main+0x130>
    25d2:	8c 81       	ldd	r24, Y+4	; 0x04
    25d4:	9d 81       	ldd	r25, Y+5	; 0x05
    25d6:	83 33       	cpi	r24, 0x33	; 51
    25d8:	91 05       	cpc	r25, r1
    25da:	50 f4       	brcc	.+20     	; 0x25f0 <main+0x130>
			LED_on(GREEN);
    25dc:	86 e0       	ldi	r24, 0x06	; 6
    25de:	0e 94 bc 08 	call	0x1178	; 0x1178 <LED_on>
			LED_off(BLUE);
    25e2:	87 e0       	ldi	r24, 0x07	; 7
    25e4:	0e 94 cb 08 	call	0x1196	; 0x1196 <LED_off>
			LED_on(RED);
    25e8:	85 e0       	ldi	r24, 0x05	; 5
    25ea:	0e 94 bc 08 	call	0x1178	; 0x1178 <LED_on>
    25ee:	22 c0       	rjmp	.+68     	; 0x2634 <main+0x174>
		}

		else if (lightIntensity > 50 && lightIntensity <= 70) {
    25f0:	8c 81       	ldd	r24, Y+4	; 0x04
    25f2:	9d 81       	ldd	r25, Y+5	; 0x05
    25f4:	83 33       	cpi	r24, 0x33	; 51
    25f6:	91 05       	cpc	r25, r1
    25f8:	78 f0       	brcs	.+30     	; 0x2618 <main+0x158>
    25fa:	8c 81       	ldd	r24, Y+4	; 0x04
    25fc:	9d 81       	ldd	r25, Y+5	; 0x05
    25fe:	87 34       	cpi	r24, 0x47	; 71
    2600:	91 05       	cpc	r25, r1
    2602:	50 f4       	brcc	.+20     	; 0x2618 <main+0x158>
			LED_off(GREEN);
    2604:	86 e0       	ldi	r24, 0x06	; 6
    2606:	0e 94 cb 08 	call	0x1196	; 0x1196 <LED_off>
			LED_off(BLUE);
    260a:	87 e0       	ldi	r24, 0x07	; 7
    260c:	0e 94 cb 08 	call	0x1196	; 0x1196 <LED_off>
			LED_on(RED);
    2610:	85 e0       	ldi	r24, 0x05	; 5
    2612:	0e 94 bc 08 	call	0x1178	; 0x1178 <LED_on>
    2616:	0e c0       	rjmp	.+28     	; 0x2634 <main+0x174>
		}

		else if (lightIntensity > 70) {
    2618:	8c 81       	ldd	r24, Y+4	; 0x04
    261a:	9d 81       	ldd	r25, Y+5	; 0x05
    261c:	87 34       	cpi	r24, 0x47	; 71
    261e:	91 05       	cpc	r25, r1
    2620:	48 f0       	brcs	.+18     	; 0x2634 <main+0x174>
			LED_off(GREEN);
    2622:	86 e0       	ldi	r24, 0x06	; 6
    2624:	0e 94 cb 08 	call	0x1196	; 0x1196 <LED_off>
			LED_off(BLUE);
    2628:	87 e0       	ldi	r24, 0x07	; 7
    262a:	0e 94 cb 08 	call	0x1196	; 0x1196 <LED_off>
			LED_off(RED);
    262e:	85 e0       	ldi	r24, 0x05	; 5
    2630:	0e 94 cb 08 	call	0x1196	; 0x1196 <LED_off>
			o Temperature ≥ 25°C and < 30°C: Fan ON at 25% speed.
			o Temperature < 25°C: Fan OFF.
			o Fire Detection and Alert: The system raises
		 */

		roomTemp = LM35_getTemperature();
    2634:	0e 94 a6 11 	call	0x234c	; 0x234c <LM35_getTemperature>
    2638:	88 2f       	mov	r24, r24
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	9b 83       	std	Y+3, r25	; 0x03
    263e:	8a 83       	std	Y+2, r24	; 0x02

		if (roomTemp < 25) {
    2640:	8a 81       	ldd	r24, Y+2	; 0x02
    2642:	9b 81       	ldd	r25, Y+3	; 0x03
    2644:	89 31       	cpi	r24, 0x19	; 25
    2646:	91 05       	cpc	r25, r1
    2648:	30 f4       	brcc	.+12     	; 0x2656 <main+0x196>
			DC_MOTOR_Rotate(Stop, 0);
    264a:	80 e0       	ldi	r24, 0x00	; 0
    264c:	60 e0       	ldi	r22, 0x00	; 0
    264e:	0e 94 53 07 	call	0xea6	; 0xea6 <DC_MOTOR_Rotate>
			fanFLag = 0;
    2652:	19 82       	std	Y+1, r1	; 0x01
    2654:	5c cf       	rjmp	.-328    	; 0x250e <main+0x4e>
		}

		else if (roomTemp >= 25 && roomTemp < 30) {
    2656:	8a 81       	ldd	r24, Y+2	; 0x02
    2658:	9b 81       	ldd	r25, Y+3	; 0x03
    265a:	89 31       	cpi	r24, 0x19	; 25
    265c:	91 05       	cpc	r25, r1
    265e:	60 f0       	brcs	.+24     	; 0x2678 <main+0x1b8>
    2660:	8a 81       	ldd	r24, Y+2	; 0x02
    2662:	9b 81       	ldd	r25, Y+3	; 0x03
    2664:	8e 31       	cpi	r24, 0x1E	; 30
    2666:	91 05       	cpc	r25, r1
    2668:	38 f4       	brcc	.+14     	; 0x2678 <main+0x1b8>
			DC_MOTOR_Rotate(AntiClockwise, 25);
    266a:	82 e0       	ldi	r24, 0x02	; 2
    266c:	69 e1       	ldi	r22, 0x19	; 25
    266e:	0e 94 53 07 	call	0xea6	; 0xea6 <DC_MOTOR_Rotate>
			fanFLag = 1;
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	89 83       	std	Y+1, r24	; 0x01
    2676:	4b cf       	rjmp	.-362    	; 0x250e <main+0x4e>
		}

		else if (roomTemp >= 30 && roomTemp < 35) {
    2678:	8a 81       	ldd	r24, Y+2	; 0x02
    267a:	9b 81       	ldd	r25, Y+3	; 0x03
    267c:	8e 31       	cpi	r24, 0x1E	; 30
    267e:	91 05       	cpc	r25, r1
    2680:	60 f0       	brcs	.+24     	; 0x269a <main+0x1da>
    2682:	8a 81       	ldd	r24, Y+2	; 0x02
    2684:	9b 81       	ldd	r25, Y+3	; 0x03
    2686:	83 32       	cpi	r24, 0x23	; 35
    2688:	91 05       	cpc	r25, r1
    268a:	38 f4       	brcc	.+14     	; 0x269a <main+0x1da>
			DC_MOTOR_Rotate(AntiClockwise, 50);
    268c:	82 e0       	ldi	r24, 0x02	; 2
    268e:	62 e3       	ldi	r22, 0x32	; 50
    2690:	0e 94 53 07 	call	0xea6	; 0xea6 <DC_MOTOR_Rotate>

			fanFLag = 1;
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	89 83       	std	Y+1, r24	; 0x01
    2698:	3a cf       	rjmp	.-396    	; 0x250e <main+0x4e>
		}

		else if (roomTemp >= 35 && roomTemp < 40) {
    269a:	8a 81       	ldd	r24, Y+2	; 0x02
    269c:	9b 81       	ldd	r25, Y+3	; 0x03
    269e:	83 32       	cpi	r24, 0x23	; 35
    26a0:	91 05       	cpc	r25, r1
    26a2:	60 f0       	brcs	.+24     	; 0x26bc <main+0x1fc>
    26a4:	8a 81       	ldd	r24, Y+2	; 0x02
    26a6:	9b 81       	ldd	r25, Y+3	; 0x03
    26a8:	88 32       	cpi	r24, 0x28	; 40
    26aa:	91 05       	cpc	r25, r1
    26ac:	38 f4       	brcc	.+14     	; 0x26bc <main+0x1fc>
			DC_MOTOR_Rotate(AntiClockwise, 75);
    26ae:	82 e0       	ldi	r24, 0x02	; 2
    26b0:	6b e4       	ldi	r22, 0x4B	; 75
    26b2:	0e 94 53 07 	call	0xea6	; 0xea6 <DC_MOTOR_Rotate>
			fanFLag = 1;
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	89 83       	std	Y+1, r24	; 0x01
    26ba:	29 cf       	rjmp	.-430    	; 0x250e <main+0x4e>
		}

		else {
			DC_MOTOR_Rotate(AntiClockwise, 100);
    26bc:	82 e0       	ldi	r24, 0x02	; 2
    26be:	64 e6       	ldi	r22, 0x64	; 100
    26c0:	0e 94 53 07 	call	0xea6	; 0xea6 <DC_MOTOR_Rotate>
			fanFLag = 1;
    26c4:	81 e0       	ldi	r24, 0x01	; 1
    26c6:	89 83       	std	Y+1, r24	; 0x01
    26c8:	22 cf       	rjmp	.-444    	; 0x250e <main+0x4e>

000026ca <__mulsi3>:
    26ca:	62 9f       	mul	r22, r18
    26cc:	d0 01       	movw	r26, r0
    26ce:	73 9f       	mul	r23, r19
    26d0:	f0 01       	movw	r30, r0
    26d2:	82 9f       	mul	r24, r18
    26d4:	e0 0d       	add	r30, r0
    26d6:	f1 1d       	adc	r31, r1
    26d8:	64 9f       	mul	r22, r20
    26da:	e0 0d       	add	r30, r0
    26dc:	f1 1d       	adc	r31, r1
    26de:	92 9f       	mul	r25, r18
    26e0:	f0 0d       	add	r31, r0
    26e2:	83 9f       	mul	r24, r19
    26e4:	f0 0d       	add	r31, r0
    26e6:	74 9f       	mul	r23, r20
    26e8:	f0 0d       	add	r31, r0
    26ea:	65 9f       	mul	r22, r21
    26ec:	f0 0d       	add	r31, r0
    26ee:	99 27       	eor	r25, r25
    26f0:	72 9f       	mul	r23, r18
    26f2:	b0 0d       	add	r27, r0
    26f4:	e1 1d       	adc	r30, r1
    26f6:	f9 1f       	adc	r31, r25
    26f8:	63 9f       	mul	r22, r19
    26fa:	b0 0d       	add	r27, r0
    26fc:	e1 1d       	adc	r30, r1
    26fe:	f9 1f       	adc	r31, r25
    2700:	bd 01       	movw	r22, r26
    2702:	cf 01       	movw	r24, r30
    2704:	11 24       	eor	r1, r1
    2706:	08 95       	ret

00002708 <__divmodhi4>:
    2708:	97 fb       	bst	r25, 7
    270a:	09 2e       	mov	r0, r25
    270c:	07 26       	eor	r0, r23
    270e:	0a d0       	rcall	.+20     	; 0x2724 <__divmodhi4_neg1>
    2710:	77 fd       	sbrc	r23, 7
    2712:	04 d0       	rcall	.+8      	; 0x271c <__divmodhi4_neg2>
    2714:	0c d0       	rcall	.+24     	; 0x272e <__udivmodhi4>
    2716:	06 d0       	rcall	.+12     	; 0x2724 <__divmodhi4_neg1>
    2718:	00 20       	and	r0, r0
    271a:	1a f4       	brpl	.+6      	; 0x2722 <__divmodhi4_exit>

0000271c <__divmodhi4_neg2>:
    271c:	70 95       	com	r23
    271e:	61 95       	neg	r22
    2720:	7f 4f       	sbci	r23, 0xFF	; 255

00002722 <__divmodhi4_exit>:
    2722:	08 95       	ret

00002724 <__divmodhi4_neg1>:
    2724:	f6 f7       	brtc	.-4      	; 0x2722 <__divmodhi4_exit>
    2726:	90 95       	com	r25
    2728:	81 95       	neg	r24
    272a:	9f 4f       	sbci	r25, 0xFF	; 255
    272c:	08 95       	ret

0000272e <__udivmodhi4>:
    272e:	aa 1b       	sub	r26, r26
    2730:	bb 1b       	sub	r27, r27
    2732:	51 e1       	ldi	r21, 0x11	; 17
    2734:	07 c0       	rjmp	.+14     	; 0x2744 <__udivmodhi4_ep>

00002736 <__udivmodhi4_loop>:
    2736:	aa 1f       	adc	r26, r26
    2738:	bb 1f       	adc	r27, r27
    273a:	a6 17       	cp	r26, r22
    273c:	b7 07       	cpc	r27, r23
    273e:	10 f0       	brcs	.+4      	; 0x2744 <__udivmodhi4_ep>
    2740:	a6 1b       	sub	r26, r22
    2742:	b7 0b       	sbc	r27, r23

00002744 <__udivmodhi4_ep>:
    2744:	88 1f       	adc	r24, r24
    2746:	99 1f       	adc	r25, r25
    2748:	5a 95       	dec	r21
    274a:	a9 f7       	brne	.-22     	; 0x2736 <__udivmodhi4_loop>
    274c:	80 95       	com	r24
    274e:	90 95       	com	r25
    2750:	bc 01       	movw	r22, r24
    2752:	cd 01       	movw	r24, r26
    2754:	08 95       	ret

00002756 <__prologue_saves__>:
    2756:	2f 92       	push	r2
    2758:	3f 92       	push	r3
    275a:	4f 92       	push	r4
    275c:	5f 92       	push	r5
    275e:	6f 92       	push	r6
    2760:	7f 92       	push	r7
    2762:	8f 92       	push	r8
    2764:	9f 92       	push	r9
    2766:	af 92       	push	r10
    2768:	bf 92       	push	r11
    276a:	cf 92       	push	r12
    276c:	df 92       	push	r13
    276e:	ef 92       	push	r14
    2770:	ff 92       	push	r15
    2772:	0f 93       	push	r16
    2774:	1f 93       	push	r17
    2776:	cf 93       	push	r28
    2778:	df 93       	push	r29
    277a:	cd b7       	in	r28, 0x3d	; 61
    277c:	de b7       	in	r29, 0x3e	; 62
    277e:	ca 1b       	sub	r28, r26
    2780:	db 0b       	sbc	r29, r27
    2782:	0f b6       	in	r0, 0x3f	; 63
    2784:	f8 94       	cli
    2786:	de bf       	out	0x3e, r29	; 62
    2788:	0f be       	out	0x3f, r0	; 63
    278a:	cd bf       	out	0x3d, r28	; 61
    278c:	09 94       	ijmp

0000278e <__epilogue_restores__>:
    278e:	2a 88       	ldd	r2, Y+18	; 0x12
    2790:	39 88       	ldd	r3, Y+17	; 0x11
    2792:	48 88       	ldd	r4, Y+16	; 0x10
    2794:	5f 84       	ldd	r5, Y+15	; 0x0f
    2796:	6e 84       	ldd	r6, Y+14	; 0x0e
    2798:	7d 84       	ldd	r7, Y+13	; 0x0d
    279a:	8c 84       	ldd	r8, Y+12	; 0x0c
    279c:	9b 84       	ldd	r9, Y+11	; 0x0b
    279e:	aa 84       	ldd	r10, Y+10	; 0x0a
    27a0:	b9 84       	ldd	r11, Y+9	; 0x09
    27a2:	c8 84       	ldd	r12, Y+8	; 0x08
    27a4:	df 80       	ldd	r13, Y+7	; 0x07
    27a6:	ee 80       	ldd	r14, Y+6	; 0x06
    27a8:	fd 80       	ldd	r15, Y+5	; 0x05
    27aa:	0c 81       	ldd	r16, Y+4	; 0x04
    27ac:	1b 81       	ldd	r17, Y+3	; 0x03
    27ae:	aa 81       	ldd	r26, Y+2	; 0x02
    27b0:	b9 81       	ldd	r27, Y+1	; 0x01
    27b2:	ce 0f       	add	r28, r30
    27b4:	d1 1d       	adc	r29, r1
    27b6:	0f b6       	in	r0, 0x3f	; 63
    27b8:	f8 94       	cli
    27ba:	de bf       	out	0x3e, r29	; 62
    27bc:	0f be       	out	0x3f, r0	; 63
    27be:	cd bf       	out	0x3d, r28	; 61
    27c0:	ed 01       	movw	r28, r26
    27c2:	08 95       	ret

000027c4 <itoa>:
    27c4:	fb 01       	movw	r30, r22
    27c6:	9f 01       	movw	r18, r30
    27c8:	e8 94       	clt
    27ca:	42 30       	cpi	r20, 0x02	; 2
    27cc:	c4 f0       	brlt	.+48     	; 0x27fe <itoa+0x3a>
    27ce:	45 32       	cpi	r20, 0x25	; 37
    27d0:	b4 f4       	brge	.+44     	; 0x27fe <itoa+0x3a>
    27d2:	4a 30       	cpi	r20, 0x0A	; 10
    27d4:	29 f4       	brne	.+10     	; 0x27e0 <itoa+0x1c>
    27d6:	97 fb       	bst	r25, 7
    27d8:	1e f4       	brtc	.+6      	; 0x27e0 <itoa+0x1c>
    27da:	90 95       	com	r25
    27dc:	81 95       	neg	r24
    27de:	9f 4f       	sbci	r25, 0xFF	; 255
    27e0:	64 2f       	mov	r22, r20
    27e2:	77 27       	eor	r23, r23
    27e4:	0e 94 97 13 	call	0x272e	; 0x272e <__udivmodhi4>
    27e8:	80 5d       	subi	r24, 0xD0	; 208
    27ea:	8a 33       	cpi	r24, 0x3A	; 58
    27ec:	0c f0       	brlt	.+2      	; 0x27f0 <itoa+0x2c>
    27ee:	89 5d       	subi	r24, 0xD9	; 217
    27f0:	81 93       	st	Z+, r24
    27f2:	cb 01       	movw	r24, r22
    27f4:	00 97       	sbiw	r24, 0x00	; 0
    27f6:	a1 f7       	brne	.-24     	; 0x27e0 <itoa+0x1c>
    27f8:	16 f4       	brtc	.+4      	; 0x27fe <itoa+0x3a>
    27fa:	5d e2       	ldi	r21, 0x2D	; 45
    27fc:	51 93       	st	Z+, r21
    27fe:	10 82       	st	Z, r1
    2800:	c9 01       	movw	r24, r18
    2802:	0c 94 03 14 	jmp	0x2806	; 0x2806 <strrev>

00002806 <strrev>:
    2806:	dc 01       	movw	r26, r24
    2808:	fc 01       	movw	r30, r24
    280a:	67 2f       	mov	r22, r23
    280c:	71 91       	ld	r23, Z+
    280e:	77 23       	and	r23, r23
    2810:	e1 f7       	brne	.-8      	; 0x280a <strrev+0x4>
    2812:	32 97       	sbiw	r30, 0x02	; 2
    2814:	04 c0       	rjmp	.+8      	; 0x281e <strrev+0x18>
    2816:	7c 91       	ld	r23, X
    2818:	6d 93       	st	X+, r22
    281a:	70 83       	st	Z, r23
    281c:	62 91       	ld	r22, -Z
    281e:	ae 17       	cp	r26, r30
    2820:	bf 07       	cpc	r27, r31
    2822:	c8 f3       	brcs	.-14     	; 0x2816 <strrev+0x10>
    2824:	08 95       	ret

00002826 <_exit>:
    2826:	f8 94       	cli

00002828 <__stop_program>:
    2828:	ff cf       	rjmp	.-2      	; 0x2828 <__stop_program>
